<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lazutils">
    <!--
    ====================================================================
      FileUtil
    ====================================================================
    -->
    <module name="FileUtil">
      <short>
        Miscellaneous procedures, functions, types, and classes for manipulating files and file names
      </short>
      <descr>
        <p>
          This unit contains functions, procedures, types, and classes used to maintain compatibility with the FileUtil unit in Delphi. File routines that deal with UTF-8 file names are located in the LazFileUtils unit.
        </p>
        <p>
          File name handling in the unit is platform- or OS-specific. For the Windows, Darwin (MacOS), and Amiga platforms, file names are <b>NOT</b> case sensitive. In addition, under Darwin, the <b>NotLiteralFilenames</b> define is enabled. This indicates that file names cannot be compared using the <b>=</b>
          string operator.
        </p>
        <p>
          This unit contains basic functions similar to those in the RTL, but use UTF-8 instead of the defauilt system encoding. Please note that AnsiToUTF8 and UTF8ToAnsi need a widestring manager under Linux, BSD, and MacOSX. Normally these OS's use UTF-8 as system encoding so the WideStringManager is not needed.
        </p>
      </descr>

      <!-- unresolved type reference Visibility: default -->
      <element name="Classes"/>
      <element name="SysUtils"/>
      <element name="StrUtils"/>
      <element name="Masks"/>
      <element name="LazUTF8"/>
      <element name="LazFileUtils"/>

      <element name="UTF8FileHeader">
        <short>Byte Order Mark (BOM) used at the beginning of UTF-8-encoded files</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="FilenamesCaseSensitive">
        <short>
          When True, uppercase and lowercase file names are treated as equivalent
        </short>
        <descr>
          The value is determined by the presence of the <b>CaseInsensitiveFilenames</b> compiler define.
        </descr>
        <seealso></seealso>
      </element>

      <element name="FilenamesLiteral">
        <short>
          When True, file names can be compared using the <b>=</b>
          string operator
        </short>
        <descr>
          The value is determined by the presence of the <b>NotLiteralFilenames</b> compiler define.
        </descr>
        <seealso></seealso>
      </element>

      <element name="ComparePhysicalFilenames">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="ComparePhysicalFilenames.Filename1">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="ComparePhysicalFilenames.Filename2">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="ComparePhysicalFilenames.Result">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="CompareFilenames">
        <short>
          <var>CompareFileNames</var>
          - compares two file names to see whether they are equal
        </short>
      </element>
      <element name="CompareFilenames.Result">
        <short>
          Returns zero if files are equal, or the index of differences, or the difference in length if filenames are not equal
        </short>
      </element>
      <element name="CompareFilenames.Filename1">
        <short>First filename</short>
      </element>
      <element name="CompareFilenames.Len1">
        <short>Length of first filename</short>
      </element>
      <element name="CompareFilenames.Filename2">
        <short>Second filename</short>
      </element>
      <element name="CompareFilenames.Len2">
        <short>Length of second filename</short>
      </element>
      <element name="CompareFilenames.ResolveLinks">
        <short>
          <var>ResolveLinks</var> - if True, searches through links to find the actual file for comparison
        </short>
      </element>

      <element name="ExtractShortPathNameUTF8">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="ExtractShortPathNameUTF8.FileName">
        <short></short>
      </element>
      <element name="ExtractShortPathNameUTF8.Result">
        <short></short>
      </element>

      <element name="DeleteDirectory">
        <short>
          <var>DeleteDirectory</var> - Delete the named directory (or only its contents if <var>OnlyChildren</var> is True)
        </short>
        <errors>
          If there was an error, such as trying to removing . or .., or there were insufficient permissions, or the file did not exist, False is returned
        </errors>
      </element>
      <element name="DeleteDirectory.Result">
        <short>Returns True if the directory or its contents were correctly removed</short>
      </element>
      <element name="DeleteDirectory.DirectoryName">
        <short>The name of the directory for processing</short>
      </element>
      <element name="DeleteDirectory.OnlyChildren">
        <short>If True, only the contents ('children') of the directory are removed</short>
      </element>

      <element name="ProgramDirectory">
        <short>
          <var>ProgramDirectory</var> - returns the directory in which the currently running program resides
        </short>
      </element>
      <element name="ProgramDirectory.Result">
        <short>
          Returns the name of the directory in which the current program is found
        </short>
      </element>

      <element name="ProgramDirectoryWithBundle">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="ProgramDirectoryWithBundle.Result">
        <short></short>
      </element>

      <element name="ExpandUNCFileNameUTF8">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="ExpandUNCFileNameUTF8.FileName">
        <short></short>
      </element>
      <element name="ExpandUNCFileNameUTF8.Result">
        <short></short>
      </element>

      <element name="FileSize">
        <short>
          <var>FileSize</var> - finds the size of the named file</short>
      </element>
      <element name="FileSize.Result">
        <short>Returns the size of the file, or -1 if not there</short>
      </element>
      <element name="FileSize.Filename">
        <short>The name of the file for checking</short>
      </element>

      <element name="FilenameIsPascalUnit">
        <short>
          <var>FilenameIsPascalUnit</var> - checks that the supplied name is a correct Pascal unit name
        </short>
        <descr>
          <p>
            <var>FilenameIsPascalUnit</var> - checks that the supplied name is a correct Pascal unit name. It examines the file extension to see if it matches one of the standard Pascal extensions (currently .p, .pp, .pas).
          </p>
        </descr>
      </element>
      <element name="FilenameIsPascalUnit.Result">
        <short>Returns True if the supplied name is a correct Pascal Unit filename</short>
      </element>
      <element name="FilenameIsPascalUnit.Filename">
        <short>The name of the file to examine</short>
      </element>

      <element name="FileIsInPath">
        <short>
          <var>FileIsInPath</var> - checks that <var>FileName</var> refers to a file that exists within the given <var>Path</var>
        </short>
      </element>
      <element name="FileIsInPath.Result">
        <short>
          Returns True if a file named <var>Filename</var> exists within the given <var>Path</var>
        </short>
      </element>
      <element name="FileIsInPath.Filename">
        <short>The name of the file for checking</short>
      </element>
      <element name="FileIsInPath.Path">
        <short>
          The <var>Path</var> to be searched
        </short>
      </element>

      <element name="FileIsInDirectory">
        <short>
          <var>FileIsInDirectory</var> - checks whether a file with <var>FileName</var> exists within the given <var>Directory</var>
        </short>
        <descr>
          <p>
            <var>FileIsInDirectory</var> - checks whether a file with <var>FileName</var> exists within the given <var>Directory</var>.
          </p>
        </descr>
      </element>
      <element name="FileIsInDirectory.Result">
        <short>Returns True if the file is in the directory</short>
      </element>
      <element name="FileIsInDirectory.Filename">
        <short>The name of the file to be checked</short>
      </element>
      <element name="FileIsInDirectory.Directory">
        <short>The name of the directory to be searched for the file</short>
      </element>

      <element name="ExtractFileNameWithoutExt">
        <short>
          <var>ExtractFileNameWithoutExt</var> - returns just the name of the file without an extension
        </short>
      </element>
      <element name="ExtractFileNameWithoutExt.Result">
        <short>
          Returns the original file name if it had no extension, otherwise returns the file name with its extension removed
        </short>
      </element>
      <element name="ExtractFileNameWithoutExt.AFilename">
        <short>The name of the file for checking</short>
      </element>

      <element name="CreateAbsoluteSearchPath">
        <short>
          <var>CreateAbsoluteSearchPath</var> - concatenates <var>BaseDirectory </var>and <var>SearchPath</var> to form an absolute path to search for files
        </short>
        <descr>
          <p>
            <var>CreateAbsoluteSearchPath</var> - concatenates <var>BaseDirectory </var> and <var>SearchPath</var> to form an absolute path to search for files.
          </p>
          <p>
            The routine adds the appropriate path delimiters to the BaseDirectory string, and adds the search path. Each directory in the search path is examined to ensure that each is also an absolute directory path. The return value contains the fully-formed absolute search path.
          </p>
          <p>
            If <var>BaseDirectory</var> is empty, the function exits with a return value equal to <var>SearchPath</var>. if <var>SearchPath</var> is empty, the function exits with empty string <b>('')</b> in the return value.
          </p>
          <p>
            Deprecated. Use the CreateAbsoluteSearchPath function from the LazFileUtils unit.
          </p>
        </descr>
        <version>
          Deprecated in LCL version 2.1.0.
        </version>
      </element>
      <element name="CreateAbsoluteSearchPath.Result">
        <short>
          The absolute path formed by concatenating <var>BaseDirectory</var> and <var>SearchPath</var>
        </short>
      </element>
      <element name="CreateAbsoluteSearchPath.SearchPath">
        <short>The search path (a relative path)</short>
      </element>
      <element name="CreateAbsoluteSearchPath.BaseDirectory">
        <short>The base directory from which to form the absolute path</short>
      </element>

      <element name="CreateAbsolutePath">
        <short>Deprecated</short>
        <descr>
          Deprecated. Use the function from the LazFileUtils unit.
        </descr>
        <seealso></seealso>
      </element>
      <element name="CreateAbsolutePath.Filename">
        <short></short>
      </element>
      <element name="CreateAbsolutePath.BaseDirectory">
        <short></short>
      </element>
      <element name="CreateAbsolutePath.Result">
        <short></short>
      </element>

      <element name="GetAllFilesMask">
        <short>
          File mask representing all files suitable for showing in a file filter.
        </short>
        <descr>
          GetAllFilesMask returns a File Mask suitable for showing in a filter of a Open File Dialog. For Windows, '*.*' is returned; on other operating systems just '*'.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="GetAllFilesMask.Result">
        <short/>
      </element>

      <element name="GetExeExt">
        <short>
          <var>GetExeExt</var> - find the correct extension (including the starting .) for an executable file
        </short>
      </element>
      <element name="GetExeExt.Result">
        <short>Returns '.exe' in Windows, nothing in other systems.</short>
      </element>

      <element name="ReadFileToString">
        <short>
          <var>ReadFileToString</var> - returns a string with the contents of the named file
        </short>
        <descr>
          <p>
            <var>ReadFileToString</var> opens the file and reads its contents into a Stream, then reads the stream to construct the <var>Result</var> string.
          </p>
        </descr>
        <errors>
          If there is an error in reading the file, an exception is raised and an empty string is returned.
        </errors>
      </element>
      <element name="ReadFileToString.Result">
        <short>
          The contents of the file as a string, or an empty string if there is an error or the file is empty
        </short>
      </element>
      <element name="ReadFileToString.Filename">
        <short>The name of the file for processing</short>
      </element>

      <element name="TSearchFileInPathFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TSearchFileInPathFlag.sffDontSearchInBasePath">
        <short/>
      </element>
      <element name="TSearchFileInPathFlag.sffSearchLoUpCase">
        <short/>
      </element>
      <element name="TSearchFileInPathFlag.sffFile">
        <short/>
      </element>
      <element name="TSearchFileInPathFlag.sffExecutable">
        <short/>
      </element>

      <element name="TSearchFileInPathFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="sffFindProgramInPath">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="SearchFileInPath">
        <short>
          <var>SearchFileInPath</var> - searches for <var>Filename</var> in the given <var>SearchPath</var> using the supplied <var>BasePath</var> with the specified <var>Delimiter</var> and the options listed in <var>Flags</var>
        </short>
        <descr>
          <p>
            Searches the whole path. Relative folder file names are expanded using BasePath. By default if BasePath is set it is searched as well, unless <var>sffDontSearchInBasePath</var> flag is present.
          </p>
          <p>
            Returns the first file that matches the supplied criteria.
          </p>
        </descr>
        <errors>If the file does not exist, an empty string is returned</errors>
      </element>
      <element name="SearchFileInPath.Result">
        <short>
          Returns fully specified file name of the first file that matches the supplied criteria, or empty string if file not found
        </short>
      </element>
      <element name="SearchFileInPath.Filename">
        <short>The name of the file for searching</short>
      </element>
      <element name="SearchFileInPath.BasePath">
        <short>The
          <var>BasePath
          </var>to be used for the search</short>
      </element>
      <element name="SearchFileInPath.SearchPath">
        <short>The path for searching</short>
      </element>
      <element name="SearchFileInPath.Delimiter">
        <short>The directory <var>Delimiter</var> to be used in the search</short>
      </element>
      <element name="SearchFileInPath.Flags">
        <short>
          <var>Flags </var>specifying how to search: e.g. don't search in base path, case independent search
        </short>
      </element>

      <element name="SearchAllFilesInPath">
        <short>
          <var>SearchAllFilesInPath</var> - searches for all files named <var>Filename</var> in the given <var>SearchPath</var> using the supplied <var>BasePath</var> with the specified <var>Delimiter</var> and the options listed in
          <var>Flags</var>
        </short>
        <descr>
          <p>
            <var>SearchAllFilesInPath</var> searches the whole path unless the <var>sffDontSearchInBasePath</var>
            flag is present.
          </p>
          <p>
            Returns all files that match the supplied criteria
          </p>
        </descr>
      </element>
      <element name="SearchAllFilesInPath.Result">
        <short>
          Returns fully specified file names of all files that match the supplied criteria, or empty string if file not found
        </short>
      </element>
      <element name="SearchAllFilesInPath.Filename">
        <short>The name of the file for searching</short>
      </element>
      <element name="SearchAllFilesInPath.BasePath">
        <short>
          The <var>BasePath </var>to be used for the search
        </short>
      </element>
      <element name="SearchAllFilesInPath.SearchPath">
        <short>The path for searching</short>
      </element>
      <element name="SearchAllFilesInPath.Delimiter">
        <short>
          The directory <var>Delimiter</var> to be used in the search
        </short>
      </element>
      <element name="SearchAllFilesInPath.Flags">
        <short>
          <var>Flags </var>specifying how to search: e.g. don't search in base path, case independent search
        </short>
      </element>

      <element name="FindDiskFilename">
        <short>
          <var>FindDiskFilename</var> - finds the file that best fits the supplied filename
        </short>
        <descr>
          <p>
            <var>FindDiskFilename</var> - finds the file that best fits the supplied filename. Searches for the filename case on disk. The file must exist.
          </p>
          <p>
            For example: If Filename='file' and there is only a 'File', then 'File' will be returned.
          </p>
        </descr>
      </element>
      <element name="FindDiskFilename.Result">
        <short>
          Returns the best fitting filename from the disk (taking case into consideration)
        </short>
      </element>
      <element name="FindDiskFilename.Filename">
        <short>The name of the file for checking</short>
      </element>

      <element name="FindDiskFileCaseInsensitive">
        <short>
          <var>FindDiskFileCaseInsensitive</var> - searches for the given <var>FileName</var> in a case insensitive manner
        </short>
      </element>
      <element name="FindDiskFileCaseInsensitive.Result">
        <short>
          If it exists, returns the file name with path information otherwise returns an empty string
        </short>
      </element>
      <element name="FindDiskFileCaseInsensitive.Filename">
        <short>The name of the file for processing</short>
      </element>

      <element name="FindDefaultExecutablePath">
        <short>
          <var>FindDefaultExecutablePath</var>
          - finds the default path to the named Executable file
        </short>
        <descr>
          <p>
            <var>FindDefaultExecutablePath</var> - finds the default path to the named Executable file. On Windows systems, it looks for files both with and without the '.EXE' extension.
          </p>
          <p>
            If Executable is not an absolute filename the executable is searched using the environment variable PATH. Relative directories in PATH are expanded using BaseDir.
          </p>
          <p>
            On non-Unix systems (e.g. Windows), it searches in BaseDir as well. While on Unix systems (e.g. Linux, OS X) it only searches in BaseDir, if PATH contains the '.' directory.
          </p>
        </descr>
      </element>
      <element name="FindDefaultExecutablePath.Result">
        <short>
          Returns the filename of the Executable file with path information attached
        </short>
      </element>
      <element name="FindDefaultExecutablePath.Executable">
        <short>
          The name of the <var>Executable</var> file
        </short>
      </element>

      <element name="TFileIterator">
        <short>Class for getting info about found file or directory.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>

      <element name="TFileIterator.FPath">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileIterator.FLevel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileIterator.FFileInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileIterator.FSearching">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileIterator.GetFileName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TFileIterator.GetFileName.Result">
        <short/>
      </element>

      <element name="TFileIterator.Stop">
        <short>Stops the searching process.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TFileSearcher.Search"/>
        </seealso>
      </element>

      <element name="TFileIterator.IsDirectory">
        <short>If the current file is directory.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TFileIterator.IsDirectory.Result">
        <short/>
      </element>

      <element name="TFileIterator.FileName">
        <short>Gets the current file name.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileIterator.FileInfo">
        <short>Gets the current file info.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileIterator.Level">
        <short>Gets the current file path level relative to base search path.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileIterator.Path">
        <short>Gets the current file path.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileIterator.Searching">
        <short>If the searching is in process.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileFoundEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileFoundEvent.FileIterator">
        <short/>
      </element>

      <element name="TDirectoryFoundEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TDirectoryFoundEvent.FileIterator">
        <short/>
      </element>

      <element name="TDirectoryEnterEvent">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDirectoryEnterEvent.FileIterator">
        <short></short>
      </element>

      <element name="TFileSearcher">
        <short>Class for searching files</short>
        <descr>
          TFileSearcher is a TFileIterator descendant used to search for files that match s search mask in a given directory path.
        </descr>
        <errors/>
        <seealso/>
      </element>

      <element name="TFileSearcher.FMaskSeparator"/>
      <element name="TFileSearcher.FPathSeparator"/>
      <element name="TFileSearcher.FFollowSymLink"/>

      <element name="TFileSearcher.FOnFileFound">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileSearcher.FOnDirectoryFound">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileSearcher.FOnDirectoryEnter">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileSearcher.FFileAttribute">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileSearcher.FDirectoryAttribute">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileSearcher.RaiseSearchingError">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>

      <element name="TFileSearcher.DoDirectoryEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>

      <element name="TFileSearcher.DoDirectoryFound">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>

      <element name="TFileSearcher.DoFileFound">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>

      <element name="TFileSearcher.Create">
        <short>Creates new file searcher object</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>

      <element name="TFileSearcher.Search">
        <short>
          Searches for files in specified path with passed options
        </short>
        <descr>
          <p>
            Searches for files in the specified path. When a matching file is found, the OnFileFound event is invoked. For directories, the OnDirectoryFound event is signalled. You can abort the search process by calling the Stop method in either of these events.
          </p>
        </descr>
        <seealso>
          <link id="TFileSearcher.OnFileFound"/>
          <link id="TFileSearcher.OnDirectoryFound"/>
          <link id="TFileIterator.Stop"/>
        </seealso>
      </element>

      <element name="TFileSearcher.Search.ASearchPath">
        <short>Base path for searching files</short>
      </element>
      <element name="TFileSearcher.Search.ASearchMask">
        <short>Mask used to determine file names that match in the search</short>
      </element>
      <element name="TFileSearcher.Search.ASearchSubDirs">
        <short>Indicates if sub directories are searched recursively</short>
      </element>
      <element name="TFileSearcher.Search.CaseSensitive">
        <short>Indicates if file names are compared using case sensitivity</short>
      </element>

      <element name="TFileSearcher.MaskSeparator">
        <short>
          Character used as a delimiter between file masks in the search critera
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileSearcher.PathSeparator">
        <short>
          Character used as a delimiter between directory paths in the search criteria
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileSearcher.FollowSymLink">
        <short>
          Indicates if a search should follow paths that are symbolic links
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileSearcher.FileAttribute">
        <short></short>
        <descr>
          FileAttribute is a Word property. The default value for the property is
          <var>faAnyfile</var>.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TFileSearcher.DirectoryAttribute">
        <short></short>
        <descr>
          DirectoryAttribute is a Word property. The default value for the property is
          <var>faDirectory</var>.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TFileSearcher.OnDirectoryFound">
        <short>Is invoked when directory is found.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileSearcher.OnFileFound">
        <short>Is invoked when file is found.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileSearcher.OnDirectoryEnter">
        <short>Event handler signalled when the searcher enters a new directory</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TListFileSearcher">
        <short>
          Stores file matching a search criteria in a TStrings class instance
        </short>
        <descr>
          TListFileSearcher is a TFileSearcher descendant used to used store files matching a specified
          search criteria in a TStrings class instance.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TListFileSearcher.FList">
        <short>Internal list used to store matching file names in the file searcher</short>
      </element>

      <element name="TListFileSearcher.DoFileFound">
        <short>
          Performs actions required to add a file name to the list of matches for the file searcher
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TListFileSearcher.Create">
        <short>
          Constructor for the class instance
        </short>
        <descr>
          Create is the constructor for the class instance. Create calls the inherited constructor, and stores the TStrings instance in AList to the the internal member used in the class instance.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TListFileSearcher.Create.AList">
        <short>TStrings class instance used to store matching file names</short>
      </element>

      <element name="TListDirectoriesSearcher">
        <short>
          Stores directory names matching a search criteria in a TStrings class instance
        </short>
        <descr>
          TListDirectoriesSearcher is a TFileSearcher descendant used to store directory names matching the specified search criteria in a TStrings class instance.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TListDirectoriesSearcher.FDirectoriesList">
        <short>Stores directory paths matching the specified search criteria</short>
      </element>

      <element name="TListDirectoriesSearcher.DoDirectoryFound">
        <short>
          Performs actions needed to add a directory path to the list of matches for the searcher
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TListDirectoriesSearcher.Create">
        <short>
          Constructor for the class instance
        </short>
        <descr>
          Create is the constructor for the class instance. Create calls the inherited constructor, and stores the value in AList to the internal member used to capture matching directory names in the class instance.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TListDirectoriesSearcher.Create.AList">
        <short>
          TStrings class instance used to store directory names matching the specified search criteria
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="FindAllFiles">
        <short>
          Returns the list of files in the specified path matching the search criteria
        </short>
        <descr>
          <p>
            FindAllFiles is an overloaded method used to populate a TStringList class instance with a list of files match the specified search criteria. The procedure variant uses an existing TStringList class instance to store the matching file names. The function variant creates the TStringList
            class instance used as the return value for the method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="FindAllFiles.Result">
        <short>List of file names matching the search criteria</short>
        <descr>
          The StringList is created in the FindAllFiles function; you should not instantiate it before calling the function.
        </descr>
      </element>
      <element name="FindAllFiles.AList">
        <short>TStringList used to store file names matching the search criteria</short>
        <descr>
          AList must be instantiated before it is passed as an argument to the method. The TStringList instance must also be freed by the routine where it was created.
        </descr>
      </element>
      <element name="FindAllFiles.SearchPath">
        <short>Base path for searching files</short>
      </element>
      <element name="FindAllFiles.SearchMask">
        <short>
          A list of masks, separated by a semicolon (;) to which found files should match
        </short>
        <descr>
          A list of masks, separated by a semicolon (;) to which found files should match. The mask can contain wildcards like * and ? and it also supports sets like [a-d,x]. See the Masks unit for more details.
        </descr>
      </element>
      <element name="FindAllFiles.SearchSubDirs">
        <short>If search recursively sub directories</short>
      </element>
      <element name="FindAllFiles.PathSeparator">
        <short>If search recursively sub directories</short>
      </element>

      <element name="FindAllDirectories">
        <short>
          Stores directory names matching the search criteria in a TStringList class instance
        </short>
        <descr>
          <p>
            FindAllDirectories is an overloaded routine used to store directory path names that match the specified search criteria in a TStringList class instance. The procedure variant uses an existing TStringList class instance to store the matching directory names. The function variant allocates a TStringList class instance used to capture the matching directory names.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="FindAllDirectories.Result">
        <short>Stores directory names matching the search criteria</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="FindAllDirectories.AList">
        <short>Stores directory names matching the search criteria</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="FindAllDirectories.SearchPath">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="FindAllDirectories.SearchSubDirs">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="FindAllDirectories.PathSeparator">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCopyFileFlag">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCopyFileFlag.cffOverwriteFile">
        <short></short>
      </element>
      <element name="TCopyFileFlag.cffCreateDestDirectory">
        <short></short>
      </element>
      <element name="TCopyFileFlag.cffPreserveTime">
        <short></short>
      </element>

      <element name="TCopyFileFlags">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="CopyFile">
        <short>
          <var>CopyFile</var> - copies Source file to Destination file, optionally preserving the timestamp of the original file
        </short>
        <errors>
          An exception is raised if the copy process does not complete successfully or correctly.
        </errors>
      </element>
      <element name="CopyFile.Result">
        <short>Returns True if successful, False if there was an error</short>
      </element>
      <element name="CopyFile.SrcFilename">
        <short>The source filename for the Copy</short>
      </element>
      <element name="CopyFile.DestFilename">
        <short>The destination filename for the Copy</short>
      </element>
      <element name="CopyFile.Flags">
        <short></short>
      </element>
      <element name="CopyFile.PreserveTime">
        <short>If True, the timestamp of the original file is preserved in the copied file</short>
      </element>
      <element name="CopyFile.ExceptionOnError">
        <short></short>
      </element>

      <element name="CopyDirTree">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="CopyDirTree.Result">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="CopyDirTree.SourceDir">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="CopyDirTree.TargetDir">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="CopyDirTree.Flags">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="PascalFileExt">
        <short>
          <var>PascalFileExt</var>
          - typically '.pas', '.pp' or '.p'
        </short>
      </element>

      <element name="PascalSourceExt">
        <short>An array of file extensions considered to be Pascal source code</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="AllDirectoryEntriesMask">
        <short>File masked used to match all directories entries</short>
        <descr></descr>
        <seealso></seealso>
      </element>

    </module>
    <!-- FileUtil -->

  </package>
</fpdoc-descriptions>
