<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lazutils">
    <!--
    ====================================================================
      laz2_DOM
    ====================================================================
    -->
    <module name="laz2_DOM">
      <short>Provides an implementation of DOM interfaces</short>
      <descr>
        <p>
          <var>laz2_dom.pas</var> provides an Implementation of DOM (Document Object Model) interfaces. It is a modified copy of the FCL dom.pp unit (revision 15251) adapted to use UTF-8 instead of WideString by Mattias Gaertner.
        </p>
        <p>
          Copyright (c) 1999-2000 by Sebastian Guenther, sg@freepascal.org<br/>
          Modified in 2006 by Sergei Gorelkin, sergei_gorelkin@mail.ru
        </p>
        <p>
          This unit provides classes which implement the interfaces defined in the
          DOM (Document Object Model) specification. The current state is:
        </p>
        <ul>
          <li>DOM Levels 1 and 2 -  Completely implemented</li>
          <li>DOM Level 3  -  Partially implemented</li>
        </ul>
        <p>
          Specification used for this implementation:<br/>
          <url href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Specification, Version 1.0,
            W3C Recommendation 13 November, 2000
          </url>
        </p>
      </descr>

      <!-- unresolved external references -->
      <element name="SysUtils"/>
      <element name="Classes"/>
      <element name="laz2_xmlutils"/>

      <!-- constant Visibility: default -->
      <element name="INDEX_SIZE_ERR">
        <short>Represents DOM exception code 1</short>
        <descr>
          Index or size is negative, or greater than the allowed value.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="DOMSTRING_SIZE_ERR">
        <short>Represents DOM exception code 2</short>
        <descr>
          Specified range of text does not fit into a DOMString.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="HIERARCHY_REQUEST_ERR">
        <short>Represents DOM exception code 3</short>
        <descr>
          Node is inserted somewhere it does not belong.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="WRONG_DOCUMENT_ERR">
        <short>Represents DOM exception code 4</short>
        <descr>
          Node is used in a different document than the one that created it (that does not support it).
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="INVALID_CHARACTER_ERR">
        <short>Represents DOM exception code 5</short>
        <descr>
          An invalid or illegal character is specified, such as in a name.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NO_DATA_ALLOWED_ERR">
        <short>Represents DOM exception code 6</short>
        <descr>
          Data is specified for a node which does not support data.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NO_MODIFICATION_ALLOWED_ERR">
        <short>Represents DOM exception code 7</short>
        <descr>
          An attempt was made to modify an object where modifications are not allowed.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NOT_FOUND_ERR">
        <short>Represents DOM exception code 8</short>
        <descr>
          An attempt is made to reference a node in a context where it does not exist.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NOT_SUPPORTED_ERR">
        <short>Represents DOM exception code 9</short>
        <descr>
          Implementation does not support the type of object requested.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="INUSE_ATTRIBUTE_ERR">
        <short>Represents DOM exception code 10</short>
        <descr>
          An attempt is made to add an attribute that is already in use elsewhere.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="INVALID_STATE_ERR">
        <short>Represents DOM exception code 11</short>
        <descr>
          An attempt is made to use an object that is no longer usable.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="SYNTAX_ERR">
        <short>Represents DOM exception code 12</short>
        <descr>
          An invalid or illegal string was specified.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="INVALID_MODIFICATION_ERR">
        <short>Represents DOM exception code 13</short>
        <descr>
          An attempt is made to modify the type of the underlying object.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NAMESPACE_ERR">
        <short>Represents DOM exception code 14</short>
        <descr>
          An attempt is made to create or change an object in a way which is incorrect for the defined namespaces.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="INVALID_ACCESS_ERR">
        <short>Represents DOM exception code 15</short>
        <descr>
          Parameter or operation is not supported by the underlying object.
        </descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="ELEMENT_NODE">
        <short>Represents the DOM Node Type for elements</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="ATTRIBUTE_NODE">
        <short>Represents the DOM Node Type for attributes</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="TEXT_NODE">
        <short>Represents the DOM Node Type for text nodes</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="CDATA_SECTION_NODE">
        <short>Represents the DOM Node Type for CDATA nodes</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="ENTITY_REFERENCE_NODE">
        <short>Represents the DOM Node Type for entity references</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="ENTITY_NODE">
        <short>Represents the DOM Node Type for entities</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="PROCESSING_INSTRUCTION_NODE">
        <short>Represents the DOM Node Type for processing instructions</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="COMMENT_NODE">
        <short>Represents the DOM Node Type for comments</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="DOCUMENT_NODE">
        <short>Represents the DOM Node Type for document elements</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="DOCUMENT_TYPE_NODE">
        <short>Represents the DOM Node Type for document type declarations</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="DOCUMENT_FRAGMENT_NODE">
        <short>Represents the DOM Node Type for document fragments</short>
        <descr></descr>
      </element>

      <!-- constant Visibility: default -->
      <element name="NOTATION_NODE">
        <short>Represents the DOM Node Type for notation declarations</short>
        <descr></descr>
      </element>

      <!-- set type Visibility: default -->
      <element name="TSetOfChar">
        <short>Defines a set of Char types</short>
        <descr></descr>
      </element>

      <!-- alias type Visibility: default -->
      <element name="DOMString">
        <short>Type used for String values in DOM interfaces</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- alias type Visibility: default -->
      <element name="DOMPChar">
        <short>Type used for Pointers to Char values in DOM interfaces</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- alias type Visibility: default -->
      <element name="DOMChar">
        <short>Type used for Char values in DOM interfaces</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- pointer type Visibility: default -->
      <element name="PDOMString">
        <short>Type used for Pointers to DOMString values</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMError">
        <short>Base class for exceptions raised in DOM interfaces</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: public -->
      <element name="EDOMError.Code">
        <short>Error code constant for the exception</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMError.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMError.Create.ACode">
        <short>Error code for the class instance</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMError.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMIndexSize">
        <short>Exception raised for an invalid index size</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMIndexSize.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMIndexSize.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMHierarchyRequest">
        <short>Exception raised when a node is inserted somewhere it doesn't belong</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMHierarchyRequest.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMHierarchyRequest.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMWrongDocument">
        <short>
          Exception raised when a node is used in a document other than the one that created it
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMWrongDocument.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMWrongDocument.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMNotFound">
        <short>
          Exception raised when accessing a node in a context where it doesn't exist
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMNotFound.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
                <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMNotFound.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMNotSupported">
        <short>
          Exception raised when the DOM implementation does not support the requested object type or operation
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMNotSupported.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMNotSupported.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMInUseAttribute">
        <short>
          Exception raised when adding an attribute that is already in use
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMInUseAttribute.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMInUseAttribute.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMInvalidState">
        <short>
          Exception raised when accessing an object that is no longer usable
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMInvalidState.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMInvalidState.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMSyntax">
        <short>
          Exception raised when an invalid or illegal string value is specified
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMSyntax.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMSyntax.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMInvalidModification">
        <short>
        Exception raised when an attempt is made to modify the type for an object
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMInvalidModification.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMInvalidModification.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMNamespace">
        <short>
          Exception raised when an object is changed in a way that is invalid for its  Namespaces
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMNamespace.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMNamespace.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- class Visibility: default -->
      <element name="EDOMInvalidAccess">
        <short>
          Exception raised when a parameter or operation is not supported by the object
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="EDOMInvalidAccess.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="EDOMInvalidAccess.Create.ASituation">
        <short>Provides context information for the error</short>
      </element>

      <!-- enumeration type Visibility: default -->
      <element name="TNodeFlagEnum">
        <short>Enumeration with flag values for DOM Nodes</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfReadonly">
        <short>Node is read-only</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfRecycled">
        <short>Node is recycled</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfLevel2">
        <short>Node is a DOM Level 2-specific type</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfIgnorableWS">
        <short>Node has ignorable whitespace</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfSpecified">
        <short>Node value was specified rather than implied</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeFlagEnum.nfDestroying">
        <short>Node is being destroyed</short>
      </element>

      <!-- set type Visibility: default -->
      <element name="TNodeFlags">
        <short>Set used to store TNodeFlagEnum values</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDOMNodeEnumerator">
        <short>Implements an enumerator for DOM Nodes</short>
        <descr>
          <p>
            <var>TDOMNodeEnumerator</var> is a class used to implement an enumerator for DOM Nodes. The enumerator is created for a specified DOM node, and provides access to the top-level children for the DOM node. It does not descend any lower than the first Child node and its Sibling nodes in the DOM sub-tree.
          </p>
          <p>
            Use the MoveNext method to select the Child nodes in the enumerator. Use the Current property to access the current DOM node for the enumerator.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.FirstChild">TDOMNode.FirstChild</link>
          <link id="TDOMNode.NextSibling">TDOMNode.NextSibling</link>
        </seealso>
      </element>

      <element name="TDOMNodeEnumerator.FNode"/>
      <element name="TDOMNodeEnumerator.FCurrent"/>

      <element name="TDOMNodeEnumerator.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNodeEnumerator.Create.Node">
        <short>DOM node examined in the enumerator</short>
      </element>

      <element name="TDOMNodeEnumerator.MoveNext">
        <short>
          Gets the First child or the next Sibling as the Current value for the enumerator
        </short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode.FirstChild">TDOMNode.FirstChild</link>
          <link id="TDOMNode.NextSibling">TDOMNode.NextSibling</link>
        </seealso>
      </element>
      <element name="TDOMNodeEnumerator.MoveNext.Result">
        <short>DOM node to use as the Current value for the enumerator</short>
      </element>

      <element name="TDOMNodeEnumerator.Current">
        <short>Current DOM node for the enumerator</short>
        <descr></descr>
        <seealso>
          <link id="TDOMNode">TDOMNode</link>
        </seealso>
      </element>

      <element name="TDOMNodeAllChildEnumerator">
        <short>
          Implements an enumerator that visits all Children in the sub-tree for a DOM node
        </short>
        <descr>
          <p>
            <var>TDOMNodeAllChildEnumerator</var> is a class used to implement an enumerator for a specified DOM node that visits all Child nodes in its sub-tree. The enumerator  uses the GetNextNode method in TDOMNode to get the value in the Current property. This means it will recursively descend into ChildNodes, and is halted when the next Sibling for the specified DOM node is reached.
          </p>
          <p>
            Use the MoveNext method to get the next DOM node for the enumerator. Use the Current property to access the currently selected DOM node.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.GetNextNode">TDOMNode.GetNextNode</link>
        </seealso>
      </element>

      <element name="TDOMNodeAllChildEnumerator.FNode"/>
      <element name="TDOMNodeAllChildEnumerator.FCurrent"/>
      <element name="TDOMNodeAllChildEnumerator.FEnd"/>

      <element name="TDOMNodeAllChildEnumerator.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNodeAllChildEnumerator.Create.Node">
        <short>DOM node examined in the enumerator</short>
      </element>

      <element name="TDOMNodeAllChildEnumerator.MoveNext">
        <short>Gets the next DOM node for the enumerator</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNodeAllChildEnumerator.MoveNext.Result">
        <short>DOM node used as the Current value for the enumerator</short>
      </element>

      <element name="TDOMNodeAllChildEnumerator.Current">
        <short>Current DOM node selected in the enumerator</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDOMNodeAllChildEnumerator.GetEnumerator">
        <short>Gets the enumerator class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNodeAllChildEnumerator.GetEnumerator.Result">
        <short>Enumerator class instance</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNode">
        <short>Implements the DOM Node interface</short>
        <descr>
          <p>
            <var>TDOMNode</var> is a class which implements the Node interface in the Document Object Model (DOM).
          </p>
          <p>
            TDOMNode represents a single node in a DOM document. It includes NodeName, NodeValue, NodeType, and Attributes properties with information common to all nodes in a document tree. The ParentNode, ChildNodes, and OwnerDocument properties provide access to the tree structure for a DOM document.
          </p>
          <p>
            TDOMNode implements the full DOM Level 2 specification, and provides partial support for the DOM Level 3 specification. It also provides extensions to the DOM Node interface that allow locating or cloning a node, perform name comparisons, or access its node flags.
          </p>
          <p>
            TDOMNode is used as the ancestor for other specialized Node types, as specified in the DOM specification. These descendent classes may alter the base value and/or behavior as required for the specialized node type.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNode.FPool"/>
      <element name="TDOMNode.FFlags"/>
      <element name="TDOMNode.FParentNode"/>
      <element name="TDOMNode.FPreviousSibling"/>
      <element name="TDOMNode.FNextSibling"/>
      <element name="TDOMNode.FOwnerDocument"/>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetNodeName" link="TDOMNode.NodeName">
        <short>Gets the value for the NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetNodeName.Result">
        <short>Value for the NodeName property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetNodeValue" link="TDOMNode.NodeValue">
        <short>Gets the value for the NodeValue property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetNodeValue.Result">
        <short>Value for the NodeValue property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode.SetNodeValue" link="TDOMNode.NodeValue">
        <short>Sets the value for the NodeValue property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.SetNodeValue.AValue">
        <short>New value for the NodeValue property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetFirstChild" link="TDOMNode.FirstChild">
        <short>Gets the value for the FirstChild property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetFirstChild.Result">
        <short>Value for the FirstChild property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetLastChild" link="TDOMNode.LastChild">
        <short>Gets the value for the LastChild property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetLastChild.Result">
        <short>Value for the LastChild property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetAttributes"  link="TDOMNode.Attributes">
        <short>Gets the value for the Attributes property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetAttributes.Result">
        <short>Value for the Attributes property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetRevision">
        <short>Gets the revision number for the node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetRevision.Result">
        <short>Revision number for the node</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetNodeType" link="TDOMNode.NodeType">
        <short>Gets the value for the NodeType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetTextContent" link="TDOMNode.TextContent">
        <short>Gets the value for the TextContent property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetTextContent.Result">
        <short>Value for the TextContent property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode.SetTextContent" link="TDOMNode.TextContent">
        <short>Sets the value in the TextContent property</short>
        <descr></descr>
                <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.SetTextContent.AValue">
        <short>Value for the TextContent property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetLocalName" link="TDOMNode.LocalName">
        <short>Gets the value for the LocalName property</short>
        <descr></descr>
                <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetLocalName.Result">
        <short>Value for the LocalName property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetNamespaceURI" link="TDOMNode.NamespaceURI">
        <short>Gets the value for the NamespaceURI property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetNamespaceURI.Result">
        <short>Value for the NamespaceURI property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetPrefix" link="TDOMNode.Prefix">
        <short>Gets the value for the Prefix property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetPrefix.Result">
        <short>Value for the Prefix property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode.SetPrefix" link="TDOMNode.Prefix">
        <short>Sets the value for the Prefix property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.SetPrefix.Value">
        <short>New value for the Prefix property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetOwnerDocument" link="TDOMNode.OwnerDocument">
        <short>Gets the value for the OwnerDocument property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetOwnerDocument.Result">
        <short>Value for the OwnerDocument property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode.GetBaseURI" link="TDOMNode.BaseURI">
        <short>Gets the value for the BaseURI property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetBaseURI.Result">
        <short>Value for the BaseURI property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode.SetReadOnly">
        <short>Updates the read-only Node flag for the DOM Node and it children</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.SetReadOnly.Value">
        <short>New value for the node flag</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode.Changing">
        <short>Determines if the Node and its owner document can be modified</short>
        <descr>
          <p>
            <var>Changing</var> is a procedure used to determine if the DOM node and its Owner document can be modified. Changing uses the Node Flags in the DOM node and its OwnerDocument to determine if the Node is marked as read-only and the document is not being freed.
          </p>
        </descr>
        <errors>
          <p>
            Raises an <var>EDOMError</var> with the DOM exception code <var>NO_MODIFICATION_ALLOWED_ERR</var> when the Node is marked as read-only.
          </p>
        </errors>
        <seealso>
          <link id="TDOMNode.OwnerDocument">TDOMNode.OwnerDocument</link>
          <link id="TDOMNode.Flags">TDOMNode.Flags</link>
          <link id="TNodeFlags">TNodeFlags</link>
        </seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TDOMNode.Create">
        <short>Constructor for the class instance</short>
        <descr>
          Create is the constructor for the class instance. Creates stores the TDOMDocument in AOwner as the OwnerDocument for the DOM node. Create calls the inherited constructor.
        </descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.Create.AOwner">
        <short>Document that is the Owner of the class instance</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMNode.Destroy">
        <short>Destructor for the class instance</short>
        <descr>
          <p>
            Destroy is the destructor for the class instance. Destroy ensures that the ParentNode is notified that the Node will be removed from the tree structure. When ParentNode is assigned, its DetachChild method is called to remove the class instance from the ChildNodes hierarchy.
          </p>
          <p>
            Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.ParentNode">TDOMNode.ParentNode</link>
          <link id="TDOMNode.DetachChild">TDOMNode.DetachChild</link>
          <link id="TDOMNode.ChildNodes">TDOMNode.ChildNodes</link>
        </seealso>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMNode.FreeInstance" link="#rtl.System.TObject.FreeInstance">
        <short>Performs actions needed to free the class instance</short>
        <descr>
          <p>
            <var>FreeInstance</var> is an overridden procedure used to perform actions needed when the class instance is freed. FreeInstance ensures that information in the internal <var>TNodePool</var> custom memory manager is updated, and the node is freed from its node pool. If the internal node pool has not been assigned, the inherited FreeInstance method is called.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.System.TObject.FreeInstance">TObject.FreeInstance</link>
          <link id="TNodePool.FreeNode">TNodePool.FreeNode</link>
        </seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.GetChildNodes" link="TDOMNode.ChildNodes">
        <short>Gets the value for the ChildNodes property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.GetChildNodes.Result">
        <short>Value for the ChildNodes property</short>
      </element>

      <element name="TDOMNode.GetChildCount">
        <short>Gets the number of Child nodes for the DOM node</short>
        <descr></descr>
      </element>
      <element name="TDOMNode.GetChildCount.Result">
        <short>Number of Child nodes for the DOM node</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.NodeName">
        <short>Name for the DOM node</short>
        <descr>
          <p>
            <var>NodeName</var> is a read-only <var>DOMString</var> property that contains the name for the DOM node. The read access specifier for the property is an abstract method in TDOMNode, and must be implemented in descendent classes to return the correct value for the DOM node specializations.
          </p>
          <p>
            The values for NodeName, NodeValue, and Attributes vary according to the node type as follows:
          </p>
          <table>
            <tr>
              <td><b>DOM Interface</b></td>
              <td><b>NodeName</b></td>
              <td><b>NodeValue</b></td>
              <td><b>Attributes</b></td>
            </tr>
            <tr>
              <td>TDOMAttr</td>
              <td>Name of the attribute</td>
              <td>Value of the attribute</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMCDATASection</td>
              <td><var>#cdata-section</var></td>
              <td>Content of the CDATA Section</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMComment</td>
              <td><var>#comment</var></td>
              <td>Content of the comment</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocument</td>
              <td><var>#document</var></td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocumentFragment</td>
              <td><var>#document-fragment</var></td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocumentType</td>
              <td>Document type name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMElement</td>
              <td>Tag name</td>
              <td>None</td>
              <td>TDOMNamedNodeMap</td>
            </tr>
            <tr>
              <td>TDOMEntity</td>
              <td>Entity name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMEntityReference</td>
              <td>Name of the entity referenced</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMNotation</td>
              <td>Notation name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMProcessingInstruction</td>
              <td>Target</td>
              <td>Entire content excluding the target</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMText</td>
              <td><var>#text</var></td>
              <td>Content of the text node</td>
              <td>N/A</td>
            </tr>
          </table>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeValue">TDOMNode.NodeValue</link>
          <link id="TDOMNode.NodeType">TDOMNode.NodeType</link>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.NodeValue">
        <short>Value for the DOM node</short>
        <descr>
          <p>
            <var>NodeValue</var> is a <var>DOMString</var> property that contains the value for the DOM node. Reading the value in NodeValue always results in an empty string (<b>''</b>) in TDOMNode, and writing the value for the property is not implemented. The access specifiers must be re-implemented in descendent classes to perform the actions required for the DOM node specializations.
          </p>
          <p>
            The values for NodeName, NodeValue, and Attributes vary according to the node type as follows:
          </p>
          <table>
            <tr>
              <td><b>DOM Interface</b></td>
              <td><b>NodeName</b></td>
              <td><b>NodeValue</b></td>
              <td><b>Attributes</b></td>
            </tr>
            <tr>
              <td>TDOMAttr</td>
              <td>Name of the attribute</td>
              <td>Value of the attribute</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMCDATASection</td>
              <td><var>#cdata-section</var></td>
              <td>Content of the CDATA Section</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMComment</td>
              <td><var>#comment</var></td>
              <td>Content of the comment</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocument</td>
              <td><var>#document</var></td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocumentFragment</td>
              <td><var>#document-fragment</var></td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMDocumentType</td>
              <td>Document type name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMElement</td>
              <td>Tag name</td>
              <td>None</td>
              <td>TDOMNamedNodeMap</td>
            </tr>
            <tr>
              <td>TDOMEntity</td>
              <td>Entity name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMEntityReference</td>
              <td>Name of the entity referenced</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMNotation</td>
              <td>Notation name</td>
              <td>None</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMProcessingInstruction</td>
              <td>Target</td>
              <td>Entire content excluding the target</td>
              <td>N/A</td>
            </tr>
            <tr>
              <td>TDOMText</td>
              <td><var>#text</var></td>
              <td>Content of the text node</td>
              <td>N/A</td>
            </tr>
          </table>
        </descr>
        <seealso>
          <link id="TDOMNode.NodeName">TDOMNode.NodeName</link>
          <link id="TDOMNode.NodeType">TDOMNode.NodeType</link>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.NodeType">
        <short>Node type for the DOM Node</short>
        <descr>
          <p>
            <var>NodeType</var> is a read-only <var>Integer</var> property that represents the DOM node type as defined in the DOM specification. The read access specifier in TDOMNode is an abstract method, and must be implemented in a descendent class to return the correct value for the DOM node specializations.
          </p>
          <p>
            DOM node specializations use the following values in the NodeType property:
          </p>
          <table>
            <tr>
              <td><b>DOM Interface</b></td>
              <td><b>NodeType Constant</b></td>
              <td><b>NodeType Value</b></td>
            </tr>
            <tr>
              <td>TDOMElement</td>
              <td>ELEMENT_NODE</td>
              <td>1</td>
            </tr>
            <tr>
              <td>TDOMAttr</td>
              <td>ATTRIBUTE_NODE</td>
              <td>2</td>
            </tr>
            <tr>
              <td>TDOMText</td>
              <td>TEXT_NODE</td>
              <td>3</td>
            </tr>
            <tr>
              <td>TDOMCDATASection</td>
              <td>CDATA_SECTION_NODE</td>
              <td>4</td>
            </tr>
            <tr>
              <td>TDOMEntityReference</td>
              <td>ENTITY_REFERENCE_NODE</td>
              <td>5</td>
            </tr>
            <tr>
              <td>TDOMEntity</td>
              <td>ENTITY_NODE</td>
              <td>6</td>
            </tr>
            <tr>
              <td>TDOMProcessingInstruction</td>
              <td>PROCESSING_INSTRUCTION_NODE</td>
              <td>7</td>
            </tr>
            <tr>
              <td>TDOMComment</td>
              <td>COMMENT_NODE name</td>
              <td>8</td>
            </tr>
            <tr>
              <td>TDOMDocument</td>
              <td>DOCUMENT_NODE</td>
              <td>9</td>
            </tr>
            <tr>
              <td>TDOMDocumentType</td>
              <td>DOCUMENT_TYPE_NODE</td>
              <td>10</td>
            </tr>
            <tr>
              <td>TDOMDocumentFragment</td>
              <td>DOCUMENT_FRAGMENT_NODE</td>
              <td>11</td>
            </tr>
            <tr>
              <td>TDOMNotation</td>
              <td>NOTATION_NODE</td>
              <td>12</td>
            </tr>
          </table>
        </descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.ParentNode">
        <short>DOM node that is the immediate ancestor of this node</short>
        <descr>
          <p>
            <var>ParentNode</var> is a read-only <var>TDOMNode</var> property that represents the DOM node that is the immediate ancestor of this node. All nodes, except TDOMAttr, TDOMDocument, TDOMDocumentFragment, TDOMEntity, and TDOMNotation may have a parent.
          </p>
          <p>
            The value in ParentNode is assigned when TDOMNode methods like InsertBefore, InternalAppend, and AppendChild are called. The value in ParentNode is cleared when the DetachChild method is called, or when ChildNodes are freed.
          </p>
          <p>
            Use ChildNodes to access the DOM nodes that are the immediate descendants of this node. Use PreviousSibling and NextSibling to access the respective DOM nodes that exist at the same Level in the DOM tree.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.InsertBefore">TDOMNode.InsertBefore</link>
          <link id="TDOMNode.InternalAppend">TDOMNode.InternalAppend</link>
          <link id="TDOMNode.AppendChild">TDOMNode.AppendChild</link>
          <link id="TDOMNode.DetachChild">TDOMNode.DetachChild</link>
          <link id="TDOMNode.ChildNodes">TDOMNode.ChildNodes</link>
          <link id="TDOMNode.PreviousSibling">TDOMNode.PreviousSibling</link>
          <link id="TDOMNode.NextSibling">TDOMNode.NextSibling</link>
          <link id="TDOMNode_WithChildren">TDOMNode_WithChildren</link>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.FirstChild">
        <short>Gets the first child node for the current node</short>
        <descr>
          <p>
            <var>FirstChild</var> is a read-only <var>TDOMNode</var> property that represents the first child node for this DOM node. In TDOMNode, the value for the property is always <b>Nil</b> (not assigned). The read access specifier is re-implemented in a descendent class (TDOMNode_WithChildren) to  provide direct support for child node access.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren">TDOMNode_WithChildren</link>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.LastChild">
        <short>Gets the last child node for the current node</short>
        <descr>
          <p>
            <var>LastChild</var> is a read-only <var>TDOMNode</var> property that represents the last child node for this DOM node. In TDOMNode, the value for the property is Elway <b>Nil</b> (not assigned). The read access specifier is re-implemented in a descendent class (TDOMNode_WithChildren) to  provide direct support for child node access.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren">TDOMNode_WithChildren</link>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.ChildNodes">
        <short>Provides access to the list of Child nodes for the current node</short>
        <descr>
          <p>
            <var>ChildNodes</var> is a read-only <var>TDOMNodeList</var> property used to provide access to the child nodes for the current DOM node. Reading the value in ChildNodes causes a TDOMNodeList to be created using the DOM tree in OwnerDocument. The list contains any DOM nodes found in OwnerDocument immediately below the current DOM node. If there are no child nodes for the current node, the list has a Length (or Count - they contain the same data) of <var>0</var> (zero). Use HasChildNodes to determine if the ChildNodes property contains any DOM nodes.
          </p>
          <remark>
            Please note: While ChildNodes is specified in TDOMNode, actually support for the list of child node is implemented in the TDOMNode_WithChildren descendant.
          </remark>
        </descr>
        <seealso>
          <link id="TDOMNode.OwnerDocument">TDOMNode.OwnerDocument</link>
          <link id="TDOMNode.HasChildNodes">TDOMNode.HasChildNodes</link>
          <link id="TDOMNodeList">TDOMNodeList</link>
          <link id="TDOMNode_WithChildren">TDOMNode_WithChildren</link>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.PreviousSibling">
        <short>Previous DOM Node at the same level in the DOM tree</short>
        <descr>
          <p>
            <var>PreviousSibling</var> is a read-only <var>TDOMNode</var> property that represents the previous DOM node at the same level in the DOM tree. If no previous node was found at the same level, the property is unassigned (contains <b>Nil</b>).
          </p>
          <p>
            Use NextSibling to access the next node at the same level in the DOM tree.
          </p>
        </descr>
        <seealso>
          <link  id="TDOMNode.NextSibling">TDOMNode.NextSibling</link>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.NextSibling">
        <short>Next DOM Node at the same level in the DOM tree</short>
        <descr>
          <p>
            <var>NextSibling</var> is a read-only <var>TDOMNode</var> property that represents the next DOM node at the same level in the DOM tree. If no successor node was found at the same level, the property is unassigned (contains <b>Nil</b>).
          </p>
          <p>
            Use PreviousSibling to access the previous node at the same level in the DOM tree.
          </p>
        </descr>
        <seealso>
          <link  id="TDOMNode.PreviousSibling">TDOMNode.PreviousSibling</link>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.Attributes">
        <short>Contains Attribute for the DOM Node</short>
        <descr>
          <p>
            <var>Attributes</var> is a read-only <var>TDOMNamedNodeMap</var> property that contains attributes for the DOM node. Use the properties and methods in Attributes to access the DOM nodes by their name or ordinal position. Attributes also includes properties and methods that provide support for Namespace URIs and QualifiedNames as defined in the DOM specification.
          </p>
          <p>
            While specified in TDOMNode, Attributes are valid only in the  TDOMElement node type. For all other DOM node types the Attributes property is unassigned (contains <b>Nil</b>).
          </p>
        </descr>
        <seealso>
          <link id="TDOMNamedNodeMap">TDOMNamedNodeMap</link>
          <link id="TDOMElement">TDOMElement</link>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.OwnerDocument">
        <short>DOM Document that created the DOM node</short>
        <descr>
          <p>
            <var>OwnerDocument</var> is a read-only <var>TDOMDocument</var> property that represents the DOM document that created the node. OwnerDocument can be used to get access to the complete DOM tree for a document, or to access child nodes for any DOM node owned by the OwnerDocument.
          </p>
          <p>
            In the TDOMDocument node specialization, the value in OwnerDocument is always unassigned (contains <b>Nil</b>).
          </p>
        </descr>
        <seealso>
          <link iid="TDOMDocument">TDOMDocument</link>
        </seealso>
      </element>

      <element name="TDOMNode.GetEnumerator">
        <short>
          Gets an enumerator for DOM Nodes that are top-level children of the node
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNode.GetEnumerator.Result">
        <short>Enumerator for immediate child nodes in the DOM node</short>
      </element>

      <element name="TDOMNode.GetEnumeratorAllChildren">
        <short>
          Gets an enumerator for DOM Nodes that are children or grand children of the node
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNode.GetEnumeratorAllChildren.Result">
        <short>Enumerator for all child nodes in the sub-tree for the DOM node</short>
      </element>

      <element name="TDOMNode.GetNextNode">
        <short>Gets the next Child or Sibling node for the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNode.GetNextNode.Result">
        <short>first child, then next sibling, then next sibling, ...</short>
      </element>

      <element name="TDOMNode.GetNextNodeSkipChildren">
        <short>Gets the next sibling for the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNode.GetNextNodeSkipChildren.Result">
        <short>first next sibling, then next sibling of parent, ...</short>
      </element>

      <element name="TDOMNode.GetPreviousNode">
        <short>Gets the previous DOM Node in the DOM tree</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNode.GetPreviousNode.Result">
        <short>The reverse of GetNextNode</short>
      </element>

      <element name="TDOMNode.GetLastLeaf">
        <short>Gets the last Node in the DOM sub-tree for the current DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNode.GetLastLeaf.Result">
        <short>Last node in the DOM sub-tree for the current node.</short>
      </element>

      <element name="TDOMNode.GetLevel">
        <short>Gets the level in the DOM tree for the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNode.GetLevel.Result">
        <short>Root node is 0</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.InsertBefore">
        <short>Inserts a new child node immediately before the reference child node</short>
        <descr>
          <p>
            <var>InsertBefore</var> is a <var>TDOMNode</var> function used to insert a new child node immediately before the reference child node. In TDOMNode, InsertBefore always raises an EDOMHierarchyRequest exception. The method must be re-implemented in descendent classes which support child nodes in the DOM Node specialization.
          </p>
        </descr>
        <errors>
          Raises an EDOMHierarchyRequest exception; must be re-implemented in descendent classes.
        </errors>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.InsertBefore.Result">
        <short>DOM node inserted in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.InsertBefore.NewChild">
        <short>New DOM node to insert into the child nodes</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.InsertBefore.RefChild">
        <short>Reference node where the new node is inserted</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.ReplaceChild">
        <short>Replaces a child node with the specified DOM node</short>
        <descr>
          <p>
            <var>ReplaceChild</var> is a <var>TDOMNode</var> function which specifies the method used to replace a child node in the DOM sub-tree with the specified DOM node. NewChild is the DOM node to store in the DOM sub-tree. OldChild is the existing DOM node replaced with the new node value.
          </p>
          <p>
            While TDOMNode specifies the method, it does not provide physical storage for child nodes. As a result, ReplaceChild always raises an EDOMHierarchyRequest exception and the return value is always <b>Nil</b>. ReplaceChild must be re-implemented in a descendent class to provide the functionality required for other DOM Node specializations.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode">TDOMNode</link>
          <link id="TDOMNode">TDOMNode_WithChildren</link>
          <link id="TDOMNode">TDOMDocument</link>
          <link id="EDOMHierarchyRequest">EDOMHierarchyRequest</link>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.ReplaceChild.Result">
        <short>Old child node replaced in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.ReplaceChild.NewChild">
        <short>New node to store in child nodes</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.ReplaceChild.OldChild">
        <short>Old node to remove from the child nodes</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.DetachChild">
        <short>Detaches the specified child node from the DOM sub-tree for the node</short>
        <descr>
          <p>
            <var>DetachChild</var> is a <var>TDOMNode</var> function used to detach a specified child node from the DOM sub-tree for the current node. OldChild is the DOM node to remove from the DOM sub-tree. The return value contains the detached DOM node.
          </p>
          <p>
            TDOMNode specifies the DetachChild method, but does not provide physical storage for child nodes. As a result, it always raises an EDOMNotFound exception in the method. DetachChild must be re-implemented in a descendent class as required for other DOM Node specializations.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren.DetachChild">
            TDOMNode_WithChildren.DetachChild
          </link>
          <link id="TDOMNode.NodeType">
            TDOMNode.NodeType
          </link>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.DetachChild.Result">
        <short>The DOM Node detached in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.DetachChild.OldChild">
        <short>DOM Node to locate in the DOM sub-tree</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.RemoveChild">
        <short>Removes the specified child from the DOM sub-tree for this node</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.RemoveChild.Result">
        <short>Child Node removed in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.RemoveChild.OldChild">
        <short>DOM Node to locate in the DOM sub-tree</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.AppendChild">
        <short>Appends the specified node as a child node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.AppendChild.Result">
        <short>New DOM Node appended as a child node</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.AppendChild.NewChild">
        <short>DOM Node to append in the method</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.HasChildNodes">
        <short>Indicates if the DOM Node has child nodes</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.HasChildNodes.Result">
        <short>True when the size of the ChildNodes list is not zero</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.CloneNode">
        <short>Makes a copy of the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.CloneNode.Result">
        <short>DOM Node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.CloneNode.deep">
        <short>Indicates if child nodes are included in the cloned node</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.CloneNode.ACloneOwner">
        <short>DOM Document used to created the new DOM Node</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.IsSupported">
        <short>
          Indicates if a feature supports a specific version or conformance level
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.IsSupported.Result">
        <short>
          True when the feature and version number are supported in the DOM implementation
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.IsSupported.Feature">
        <short>Feature or module name to examine in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.IsSupported.Version">
        <short>Version number or conformance level required for the feature</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.HasAttributes">
        <short>Indicates if the DOM Node has attribute names and values</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.HasAttributes.Result">
        <short>True when the Attribute list is not empty</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMNode.Normalize">
        <short>Normalizes text nodes and attributes in the Node sub-tree</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.NamespaceURI">
        <short>URI for the NameSpace assigned to the DOM Node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.LocalName">
        <short>Name without the NameSpace prefix assigned to the DOM Node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.Prefix">
        <short>Prefix used for the assigned NameSpace in the DOM Node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.TextContent">
        <short>Textual representation for the DOM Node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.LookupPrefix">
        <short>Locates the Prefix for the specified NameSpace URI</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.LookupPrefix.Result">
        <short>Prefix for the Namespace URI, or an empty string</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.LookupPrefix.nsURI">
        <short>Namespace URI to locate in the Namespace information</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.LookupNamespaceURI">
        <short>Locates the NameSpace URI for the specified Prefix</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.LookupNamespaceURI.Result">
        <short>The Namespace URI for the specified Prefix, or an empty string</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.LookupNamespaceURI.APrefix">
        <short>Prefix to locate in the Namespace Information for the DOM Node</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.IsDefaultNamespace">
        <short>
          Indicates if the specified NameSpace URI is the default namespace for the DOM node
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.IsDefaultNamespace.Result">
        <short>True when the default Namespace is the specified Namespace URI</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.IsDefaultNamespace.nsURI">
        <short>
          Namespace URI to examine in the Namespace Information for the DOM Node
        </short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.baseURI">
        <short>Not defined in the DOM Level 2 APIs</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.FindNode">
        <short>Finds the Child Node with the specified name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.FindNode.Result">
        <short>DOM Node located with the specified name</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.FindNode.ANodeName">
        <short>Node Name to locate in the Child Nodes for the DOM Node</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode.CompareName">
        <short>Compares the NodeName in the DOM Node to the specified value</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode.CompareName.Result">
        <short>
          Difference between the ordinal character values for the first non-matching character in the compared names.
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode.CompareName.name">
        <short>Value compared to the NodeName for the DOM node</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode.Flags">
        <short>Provides access to the Node Flags for the DOM Node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- "class of" type Visibility: default -->
      <element name="TDOMNodeClass">
        <short>Class type used to create TDOMNode instances</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNode_WithChildren">
        <short>Extends TDOMNode to allocate storage for child nodes</short>
        <descr>
          TDOMNode_WithChildren is a TDOMNode descendant which allocates storage for child nodes in the class instance. TDOMNode_WithChildren is an extension to the Node interface in the DOM specification, and is designed to save memory in a large DOM tree.
        </descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNode_WithChildren.FFirstChild"/>
      <element name="TDOMNode_WithChildren.FLastChild"/>
      <element name="TDOMNode_WithChildren.FChildNodes"/>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_WithChildren.GetFirstChild">
        <short>Gets the first Child for the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.GetFirstChild.Result">
        <short>DOM Node that is the first child node in the DOM sub-tree</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_WithChildren.GetLastChild">
        <short>Gets the last Child for the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.GetLastChild.Result">
        <short>DOM Node that is the last child node in the DOM sub-tree</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode_WithChildren.CloneChildren">
        <short>Makes a copy of all Child nodes in the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.CloneChildren.ACopy">
        <short>DOM Node which receives the cloned child nodes</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.CloneChildren.ACloneOwner">
        <short>DOM Document used to create the cloned DOM nodes</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode_WithChildren.FreeChildren">
        <short>Frees all Child nodes in the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_WithChildren.GetTextContent" link="TDOMNode.TextContent">
        <short>Gets the value for the TextContent property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.GetTextContent.Result">
        <short>Value for the TextContent property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode_WithChildren.SetTextContent">
        <short>Sets the value for the TextContent property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.SetTextContent.AValue">
        <short>New value for the TextContent property</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMNode_WithChildren.Destroy">
        <short>Destructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_WithChildren.InsertBefore" link="TDOMNode.InsertBefore">
        <short>Inserts a new child node immediately before the reference child node</short>
        <descr>
          <p>
            <var>InsertBefore</var> is a <var>TDOMNode</var> function used to insert a new child node immediately before the reference child node. InsertBefore is an overridden function that re-implements the method defined in the ancestor class.
          </p>
          <p>
            NewChild contains the Node inserted into the DOM sub-tree for the current DOM Node. RefChild contains the Node that establishes the position where the NewChild Node is inserted in the DOM sub-tree. When RefChild is not assigned (contains <b>Nil</b>), the new child node is appended as a sibling in the DOM sub-tree. No actions are performed in the method when NewChild and RefChild contains the same DOM node.
          </p>
          <p>
            InsertBefore uses the value in the NodeType property for the NewChild node to determine the actions needed to add the node to the DOM sub-tree.  NodeType determines if NewChild requires additional processing before it is added to the DOM sub-tree. Some DOM Node types cannot be added directly to the sub-tree. Only their child nodes are added. No actions are performed for these DOM Node specialization when they do not contain child nodes. InsertBefore raises an EDOMHierarchyRequest exception if ChildNode is not a valid child node type for the current DOM node.
          </p>
          <p>
            InsertBefore updates the parent, sibling, and child relationships in DOM nodes as they are inserted (or appended) to the DOM sub-tree. The return value contains the NewChild argument with updated values in its ParentNode, PreviousSibling and NextSibling properties.
          </p>
          <p>
            InsertBefore checks the ParentNode for the RefChild argument to ensure that it resides in the DOM sub-tree for the current DOM Node. An EDOMNotFound exception is raised when it has an assigned value other than the current DOM Node.
          </p>
          <p>
            InsertBefore calls the Changing method to ensure that neither the current DOM Node nor its ancestor have their read-only Flags set. An exception is raised in Changing if Flags contains the value nfReadonly in either DOM Node.
          </p>
          <p>
            When the NodeType is DOCUMENT_TYPE_NODE, the OwnerDocument property is examined. An  EDOMWrongDocument exception is raised when the NewChild has an assigned value in the OwnerDocument property.
          </p>
        </descr>
        <errors>
          <dl>
            <dt>EDOMWrongDocument</dt>
            <dd>
              Raised when the OwnerDocument for the current node is not the same as the value in NewChild
            </dd>
            <dt>EDOMNotFound</dt>
            <dd>
              Raised when the assigned ParentNode in RefChild is not the same as the current DOM node
            </dd>
            <dt>EDOMHierarchyRequest</dt>
            <dd>
              Raised when NewChild is not a valid child node type for the current DOM node
            </dd>
          </dl>
        </errors>
        <seealso>
          <link id="TDOMNode.NodeType">TDOMNode.NodeType</link>
          <link id="TDOMNode.ParentNode">TDOMNode.ParentNode</link>
          <link id="TDOMNode.PreviousSibling">TDOMNode.PreviousSibling</link>
          <link id="TDOMNode.NextSibling">TDOMNode.NextSibling</link>
          <link id="TDOMNode.FirstChild">TDOMNode.FirstChild</link>
          <link id="TDOMNode.LastChild">TDOMNode.LastChild</link>
          <link id="TDOMNode.OwnerDocument">TDOMNode.OwnerDocument</link>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.InsertBefore.Result">
        <short>DOM Node inserted into the DOM sub-tree</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.InsertBefore.NewChild">
        <short>Child node inserted in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.InsertBefore.RefChild">
        <short>Reference child node where the new DOM node is inserted as a Sibling</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_WithChildren.ReplaceChild" link="TDOMNode.ReplaceChild">
        <short>Replace a DOM node with another DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.ReplaceChild.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.ReplaceChild.NewChild">
        <short>New DOM node to store in the sub-tree</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.ReplaceChild.OldChild">
        <short>Old DOM node replaced in the method</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_WithChildren.DetachChild" link="TDOMNode.DetachChild">
        <short>Detached the specified DOM node from the sub-tree</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.DetachChild.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.DetachChild.OldChild">
        <short>DOM node detached in the method</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_WithChildren.HasChildNodes" link="TDOMNode.HasChildNodes">
        <short>Indicates if the current DOM node has child nodes</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.HasChildNodes.Result">
        <short></short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_WithChildren.FindNode" link="TDOMNode.FindNode">
        <short>Finds a DOM node with the specified value in its NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_WithChildren.FindNode.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.FindNode.ANodeName">
        <short>Name of the DOM Node to locate in the method</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMNode_WithChildren.InternalAppend">
        <short>
          Performs actions needed to append the specified node to the DOM sub-tree
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_WithChildren.InternalAppend.NewChild">
        <short>New DOM Node appended to the DOM sub-tree</short>
      </element>

      <!-- enumeration type Visibility: default -->
      <element name="TFilterResult">
        <short>Determines the Node types included in a DOM node list</short>
        <descr>
          TFilterResult is an enumeration type with values that determine the nodes selected in TDOMNodeList.
        </descr>
        <seealso>
          <link id="TDOMNodeList.NodeFilter">TDOMNodeList.NodeFilter</link>
        </seealso>
      </element>
      <element name="TFilterResult.frFalse">
        <short>Do not accept any nodes </short>
      </element>
      <element name="TFilterResult.frNorecurseFalse">
        <short>Accept all nodes and allow recursion</short>
      </element>
      <element name="TFilterResult.frTrue">
        <short>Accept all nodes</short>
      </element>
      <element name="TFilterResult.frNorecurseTrue">
        <short>Accept all nodes but don't allow recursion</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNodeList">
        <short>Implements an ordered list of DOM Nodes</short>
        <descr>
          TDOMNodeList is a class used to Implement an ordered list of DOM Nodes, as required in the DOM specification. TDOMNodeList provides internal storage for  TDOMNode instances that are children of a specified DOM Node. DOM Nodes stored in TDOMNodeList are "live"; changes made to a DOM node in the list are automatically propagated to the DOM Document tree.
        </descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNodeList.FNode"/>
      <element name="TDOMNodeList.FRevision"/>
      <element name="TDOMNodeList.FList"/>

      <!-- function Visibility: protected -->
      <element name="TDOMNodeList.GetCount" link="TDOMNodeList.Length">
        <short>Gets the value for the Length property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNodeList.GetCount.Result">
        <short>Value for the Length property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNodeList.GetItem" link="TDOMNodeList.Item">
        <short>Gets the value for the Item property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNodeList.GetItem.Result">
        <short>Value for the Item property</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNodeList.GetItem.index">
        <short>Ordinal position for the DOM Node</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNodeList.NodeFilter">
        <short>Determine nodes that appear in the DOM Node list</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNodeList.NodeFilter.Result">
        <short>Filter used to select nodes in the list</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNodeList.NodeFilter.aNode">
        <short>DOM Node to examine in the method</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNodeList.BuildList">
        <short>Deprecated; use NodeFilter instead</short>
        <descr>Deprecated; use NodeFilter instead.</descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TDOMNodeList.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNodeList.Create.ANode">
        <short>DOM Node with the children used in the list</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMNodeList.Destroy">
        <short>Destructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNodeList.Item">
        <short>Provides indexed access to DOM Nodes in the list</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNodeList.Item.index">
        <short>Ordinal position for the request DOM Node in the list</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNodeList.Count">
        <short>Number of DOM Nodes stored in the list</short>
        <descr>Contains the same value as the Length property.</descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNodeList.Length">
        <short>Number of DOM Nodes stored in the list</short>
        <descr>Contains the same value as the Count property.</descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMElementList">
        <short>Provides a recursive list of DOM Elements</short>
        <descr>
          TDOMElementList is a TDOMNodeList descendant that provides an extension to the DOM interface used to build recursive lists of elements. TDOMElementList provides optional filtering used to select the DOM Elements that appear in the list.
        </descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMElementList.filter">
        <short>Value for the filter applied to the list</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMElementList.FNSIndexFilter">
        <short>Index of the NameSpace for the filter</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMElementList.localNameFilter">
        <short>Local name used in the filter</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMElementList.FMatchNS"/>
      <element name="TDOMElementList.FMatchAnyNS"/>

      <!-- variable Visibility: protected -->
      <element name="TDOMElementList.UseFilter">
        <short>
          Indicates if filtering is used when selecting DOM Elements in the list
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMElementList.NodeFilter">
        <short>
          Performs actions needed to determine if a DOM node matches the Filter for the list
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElementList.NodeFilter.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElementList.NodeFilter.aNode">
        <short>DOM Node to include or exclude using the Filter value</short>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TDOMElementList.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElementList.Create.ANode">
        <short>DOM Node with children for the list</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElementList.Create.AFilter">
        <short>Filter to apply to values in the list</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElementList.Create.nsURI">
        <short>NamedSpace URI for values in the list</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElementList.Create.localName">
        <short>LocalName for values in the list</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNamedNodeMap">
        <short>Implements the NamedNodeMap interface in the DOM specification</short>
        <descr>
          <p>
            <var>TDOMNamedNodeMap</var> is a class used to implement the NamedNodeMap interface in the DOM specification.TDOMNamedNodeMap is used for a collection of DOM Nodes that are accessed by their name or their ordinal position. TDOMNamedNodeMap provides support for the Namespace URIs and QualifiedNames in the collection, as required for DOM Level 2 conformance.
          </p>
          <p>
            <b>Nota Bene</b>: The DOM specification mandates unordered access to nodes in the collection. The sorting options available in TDOMNamedNodeMap are an extension to the DOM specification. To achieve this, the class uses two separate internal lists to represent the nodes in their sorted and unsorted orders. This most certainly requires additional memory and processing, but the overhead is minimal in comparison to the derived benefit.
          </p>
          <p>
            TDOMNamedNodeMap is the type used to represent Attributes, Entities, and Notations in the DOM API.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.Attributes">TDOMNode.Attributes</link>
          <link id="TDOMDocumentType.Entities">TDOMDocumentType.Entities</link>
          <link id="TDOMDocumentType.Notations">TDOMDocumentType.Notations</link>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNamedNodeMap.FOwner"/>
      <element name="TDOMNamedNodeMap.FNodeType"/>
      <element name="TDOMNamedNodeMap.FSortedList"/>
      <element name="TDOMNamedNodeMap.FPosList"/>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.GetPosItem" link="TDOMNamedNodeMap.Item">
        <short>Gets the value for the Item property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNamedNodeMap.GetPosItem.Result">
        <short>Value for the Item property</short>
      </element>
      <element name="TDOMNamedNodeMap.GetPosItem.index">
        <short>Ordinal position for the Item</short>
      </element>

      <element name="TDOMNamedNodeMap.GetSortedItem" link="TDOMNamedNodeMap.SortedItem">
        <short>Gets the value for the SortedItem property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDOMNamedNodeMap.GetSortedItem.Result">
        <short>Value for the SortedItem property</short>
      </element>
      <element name="TDOMNamedNodeMap.GetSortedItem.index">
        <short>Ordinal position for the SortedItem</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.GetLength" link="TDOMNamedNodeMap.Length">
        <short>Gets the value for the Length property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.GetLength.Result">
        <short>Value for the Length property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.FindSorted">
        <short>
          Finds a DOM Node with the specified name in the sorted collection
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.FindSorted.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.FindSorted.name">
        <short>Name to locate in the sorted collection</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.FindSorted.Index">
        <short></short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.DeleteSorted">
        <short>
          Deletes the DOM Node at the specified position in the sorted collection
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.DeleteSorted.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.DeleteSorted.index">
        <short></short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNamedNodeMap.RestoreDefault">
        <short>Restores the default value for the node with the specified name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.RestoreDefault.name">
        <short>Name of the item updated in the method</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.InternalRemove">
        <short>
          Performs actions need to remove a node from the container with the specified name
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.InternalRemove.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.InternalRemove.name">
        <short>Name of the DOM Node affected in the method</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNamedNodeMap.ValidateInsert">
        <short>
          Performs actions to determine if an inserted node is valid for its context
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.ValidateInsert.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.ValidateInsert.arg">
        <short></short>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TDOMNamedNodeMap.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.Create.AOwner">
        <short>Owner of the class instance</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.Create.ANodeType">
        <short>DOM Node type used in the container</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMNamedNodeMap.Destroy">
        <short>Destructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.GetNamedItem">
        <short>Gets the item with the specified name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.GetNamedItem.Result">
        <short>Item with the specified name</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.GetNamedItem.name">
        <short>Name to locate in the Items for the container</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.SetNamedItem">
        <short>Sets the value of a named item to the specified argument</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.SetNamedItem.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.SetNamedItem.arg">
        <short></short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.RemoveNamedItem">
        <short>Removes an item with the specified name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.RemoveNamedItem.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.RemoveNamedItem.name">
        <short>Name of the DOM Node removed in the method</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.getNamedItemNS">
        <short>Gets the Item with the specified Namespace URI and local name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.getNamedItemNS.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.getNamedItemNS.namespaceURI">
        <short>Namespace URI for the namespaced item</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.getNamedItemNS.localName">
        <short>Local name for the namespaced item</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.setNamedItemNS">
        <short>Sets the value for the item using the specified argument</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.setNamedItemNS.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.setNamedItemNS.arg">
        <short></short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNamedNodeMap.removeNamedItemNS">
        <short>Remove a DOM Node with the specified Namespace URI and local name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNamedNodeMap.removeNamedItemNS.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.removeNamedItemNS.namespaceURI">
        <short>Namespace URI for the item removed in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.removeNamedItemNS.localName">
        <short>Local name for the item removed in the method</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNamedNodeMap.Item">
        <short>Provides indexed access to the unsorted DOM Nodes in the container</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.Item.index">
        <short>Ordinal position for the DOM Node</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNamedNodeMap.SortedItem">
        <short>Provides indexed access to the sorted DOM Nodes in the container</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNamedNodeMap.SortedItem.index">
        <short>Ordinal position for the DOM Node</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNamedNodeMap.Length">
        <short>Indicates the Length of the container</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMCharacterData">
        <short>Implements the CharacterData interface from the DOM specification</short>
        <descr>
          <p>
            <var>TDOMCharacterData</var> is a <var>TDOMNode</var> descendant that implements the CharacterData interface from the DOM specification. TDOMCharacterData provides properties and methods used to access and manipulate character data in the DOM APIs. Please note that methods which alter character data use 0-based offsets; the offset values are converted internally to the 1-based offsets used in FPC/Lazarus.
          </p>
          <p>
            TDOMCharacterData is the ancestor class for other DOM Node specializations like TDOMText and TDOMComment. TDOMCharacterData is not used directly. Use one of  its descendent classes.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode">TDOMNode</link>
          <link id="TDOMText">TDOMText</link>
          <link id="TDOMComment">TDOMComment</link>
        </seealso>
      </element>

      <!-- variable Visibility: private -->
      <element name="TDOMCharacterData.FNodeValue" link="TDOMCharacterData.NodeValue"/>

      <!-- function Visibility: protected -->
      <element name="TDOMCharacterData.GetLength" link="TDOMNode.Length">
        <short>Gets the value for the Length property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCharacterData.GetLength.Result">
        <short>Value for the Length property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMCharacterData.GetNodeValue" link="TDOMNode.NodeValue">
        <short>Gets the value for the NodeValue property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCharacterData.GetNodeValue.Result">
        <short>Value for the NodeValue property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMCharacterData.SetNodeValue" link="TDOMNode.NodeValue">
        <short>Sets the value for the NodeValue property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.SetNodeValue.AValue">
        <short>Value for the NodeValue property</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMCharacterData.Data">
        <short>Provides access to character data in the NodeValue property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMCharacterData.Length">
        <short>Length of the character data in the NodeValue property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMCharacterData.SubstringData">
        <short>
          Copies character data at the specified offset using the number of bytes requested
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCharacterData.SubstringData.Result">
        <short>Byte values copied from the NodeValue</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.SubstringData.offset">
        <short>Offset to start copying character data</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.SubstringData.count">
        <short>Number of bytes to copy from the character data</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMCharacterData.AppendData">
        <short>Appends the specified value to the end of the character data</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.AppendData.arg">
        <short>Value to append to the character data</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMCharacterData.InsertData">
        <short>Inserts the specified value at the given offset in the character data</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.InsertData.offset">
        <short>Offset in the character data where the value is inserted</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.InsertData.arg">
        <short>Value inserted into the character data</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMCharacterData.DeleteData">
        <short>
          Deletes a given number of characters at the specified offset in the character data
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.DeleteData.offset">
        <short>Offset in the character data where values are deleted</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.DeleteData.count">
        <short>Number of characters to delete from the character data</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMCharacterData.ReplaceData">
        <short>Replaces the characters at the specified offset in the character data</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.ReplaceData.offset">
        <short>Offset where characters are replace in the character data</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.ReplaceData.count">
        <short>Number of characters to remove from the character data</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCharacterData.ReplaceData.arg">
        <short>Characters to insert into the character data at the specified offset</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMImplementation">
        <short>Implements the DOMImplementation interface from the DOM specification</short>
        <descr>
          <p>
            <var>TDOMImplementation</var> is a class which implements the DOMImplementation interface from the DOM specification. TDOMImplementation provides methods which perform operations that do not require an existing TDOMDocument class instance, such as creating new TDOMDocumentType or TDOMDocument instances. TDOMImplementation also implements the HasFeature method which determines if the DOM implementation supports specific features required to conform to a specific DOM level.
          </p>
        </descr>
        <seealso>
          <link id="TDOMImplementation.HasFeature">TDOMImplementation.HasFeature</link>
        </seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMImplementation.HasFeature">
        <short>
          Indicates if a feature with is supported in the DOM implementation
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMImplementation.HasFeature.Result">
        <short>True when the requested feature is supported at the required version</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.HasFeature.feature">
        <short>Feature name to examine in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.HasFeature.version">
        <short>Version number or support level required for the feature</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMImplementation.CreateDocumentType">
        <short>Creates a DOM Document Type using the specified arguments</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMImplementation.CreateDocumentType.Result">
        <short>TDOMDocumentType created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocumentType.QualifiedName">
        <short>Qualified name used in the DOM Document type</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocumentType.PublicID">
        <short>Public ID for the DOM Document type</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocumentType.SystemID">
        <short>System ID for the DOM Document type</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMImplementation.CreateDocument">
        <short>Creates a new DOM Document instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMImplementation.CreateDocument.Result">
        <short>XML document created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocument.NamespaceURI">
        <short>NameSpace URI for the root element in the XML document</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocument.QualifiedName">
        <short>QualifiedName for the root element in the XML document</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMImplementation.CreateDocument.doctype">
        <short>Document type appended to the XML document when assigned</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMDocumentFragment">
        <short>Implements the  DocumentFragment interface from the DOM specification</short>
        <descr>
          <p>
            <var>TDOMDocumentFragment</var> is a <var>TDOMNode_WithChildren</var> descendant that implements the  DocumentFragment interface from the DOM specification. TDOMDocumentFragment is a "lightweight" or "minimal" Document object. It is often used as a temporary work area before applying changes to a TDOMDocument instance. Its content does not have to represent a well-formed XML document, but does require its child nodes to be well-formed XML parsed entities.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren">TDOMNode_WithChildren</link>
          <link id="TDOMDocument">TDOMDocument</link>
          <link id="TDOMImplementation.CreateDocumentFragment">
            TDOMImplementation.CreateDocumentFragment
          </link>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentFragment.GetNodeType" link="TDOMNode.NodeType">
        <short>Gets the value for the NodeType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentFragment.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentFragment.GetNodeName" link="TDOMNode.NodeName">
        <short>Gets the value for the NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentFragment.GetNodeName.Result">
        <short>Value for the NodeName property</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocumentFragment.CloneNode">
        <short>
          Creates a copy of the document fragment that is owned by the specified document
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentFragment.CloneNode.Result">
        <short>The new copy of the document fragment</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocumentFragment.CloneNode.deep">
        <short>Indicates if child nodes are included in the cloned document fragment</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocumentFragment.CloneNode.ACloneOwner">
        <short>Document used as the owner of the cloned document fragment</short>
      </element>

      <!-- array type Visibility: default -->
      <element name="TNamespaces">
        <short>Type used for namespaces in a DOM Document</short>
        <descr>
          <p>
            <var>TNamespaces</var> is an array of <var>DOMString</var> type used to represent namespace values in a DOM Document. TNamespaces is the type used to implement the internal Namespaces member in TDOMDocument.
          </p>
        </descr>
        <seealso>
          <link id="DOMString">DOMString</link>
          <link id="TDOMDocument">TDOMDocument</link>
          <link id="TDOMDocument.IndexOfNS">TDOMDocument.IndexOfNS</link>
        </seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMDocument">
        <short>Implements the DOM Document interface</short>
        <descr>
          <p>
            <var>TDOMDocument</var> is a <var>TDOMNode_WithChildren</var> descendant that implements the DOM Document interface from the DOM specification. TDOMDocument is the container that represents the content for the entire HTML or XML document. It acts as the root of the DOM tree.
          </p>
          <p>
            TDOMDocument provides factory methods needed to create elements, attributes, text nodes, comments, processing instructions, etc.  These items cannot exist without an owner document. It also provides methods used to import nodes created in another document or document fragment.
          </p>
          <p>
            TDOMDocument provides support for XML Namespaces introduced in DOM Level 2. The following namespace prefixes and URIs are always assigned in TDOMDocument:
          </p>
          <table>
            <tr>
              <td><b>Prefix</b></td>
              <td><b>Namespace URI</b></td>
            </tr>
            <tr>
              <td>xml</td>
              <td>http://www.w3.org/XML/1998/namespace</td>
            </tr>
            <tr>
              <td>xmlns</td>
              <td>http://www.w3.org/2000/xmlns/</td>
            </tr>
          </table>
          <p>
            TDOMDocument includes the DocumentURI property introduced in DOM Level 3.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren">TDOMNode_WithChildren</link>
          <link id="TXMLDocument">TXMLDocument</link>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMDocument.FIDList"/>
      <element name="TDOMDocument.FRevision"/>
      <element name="TDOMDocument.FXML11"/>
      <element name="TDOMDocument.FImplementation"/>
      <element name="TDOMDocument.FNamespaces"/>
      <element name="TDOMDocument.FNames"/>
      <element name="TDOMDocument.FEmptyNode"/>
      <element name="TDOMDocument.FNodeLists"/>
      <element name="TDOMDocument.FMaxPoolSize"/>
      <element name="TDOMDocument.FPools"/>
      <element name="TDOMDocument.FDocumentURI"/>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetDocumentElement">
        <short>Gets the value for the DocumentElement property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetDocumentElement.Result">
        <short>Value for the DocumentElement property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetDocType">
        <short>Gets the value for the DocType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetDocType.Result">
        <short>Value for the DocType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetNodeType">
        <short>Gets the value for the NodeType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetNodeName">
        <short>Gets the value for the NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetNodeName.Result">
        <short>Value for the NodeName property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetTextContent">
        <short>Gets the value for the TextContent property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetTextContent.Result">
        <short>Value for the TextContent property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetOwnerDocument">
        <short>Gets the value for the OwnerDocument property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetOwnerDocument.Result">
        <short>Value for the OwnerDocument property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMDocument.SetTextContent">
        <short>Sets the value for the TextContent property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.SetTextContent.value">
        <short>New value for the TextContent property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMDocument.RemoveID">
        <short>Removes a DOM element from the unique list of IDs in the document</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.RemoveID.Elem">
        <short>DOM Element to remove from the hash</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetChildNodeList">
        <short>Gets a DOM Node List with the children for the specified DOM Node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetChildNodeList.Result">
        <short>Node list generated in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetChildNodeList.aNode">
        <short>DOM Node examined in the method</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.GetElementList">
        <short>Gets a DOM Element List with elements found in the specified DOM Node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetElementList.Result">
        <short>Element list generated in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementList.aNode">
        <short>DOM Node examined in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementList.nsURI">
        <short>Namespace URI for elements included in the list</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementList.aLocalName">
        <short>LocalName for elements included in the list</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementList.UseNS">
        <short>Indicates if Namespaces are used when selecting elements in the list</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMDocument.NodeListDestroyed">
        <short>
          Signals that the specified list can be removed from the internal node lists
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.NodeListDestroyed.aList">
        <short>Node list generating the notification</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocument.Alloc">
        <short>
          Ensures the DOM node class type is allocated using the Node pool for the document
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.Alloc.Result">
        <short>DOM Node created using the class reference</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.Alloc.AClass">
        <short>DOM Node class to instantiate in the method</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.IndexOfNS">
        <short>Gets the ordinal position for the specified Namespace URI</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.IndexOfNS.Result">
        <short>Ordinal position for the Namespace URI, or -1 when not found</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.IndexOfNS.nsURI">
        <short>Namespace URI to locate in the document</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.IndexOfNS.AddIfAbsent">
        <short>Indicates if the Namespace URI is added if it does not already exist</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.InsertBefore">
        <short>Inserts a DOM Node prior to the reference DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.InsertBefore.Result">
        <short>DOM Node inserted in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.InsertBefore.NewChild">
        <short>New DOM Node to include in the document</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.InsertBefore.RefChild">
        <short>Reference DOM Node that determines the location for the new DOM node</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.ReplaceChild">
        <short>Replaces a child node with another DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.ReplaceChild.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.ReplaceChild.NewChild">
        <short>New DOM node to include in the document</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.ReplaceChild.OldChild">
        <short>DOM Node replaced with the new DOM node</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocument.DocType">
        <short>Document Type declaration used in the document</short>
        <descr>
          <p>
            <var>DocType</var> is a read-only <var>TDOMDocumentType</var> property that represents the Document Type declaration found in the child nodes for the document. DocType examines the top-level child nodes to find the first node with the value <var>DOCUMENT_TYPE_NODE</var> in its NodeType property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocumentType">TDOMDocumentType</link>
          <link id="DOCUMENT_TYPE_NODE">DOCUMENT_TYPE_NODE</link>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocument.Impl">
        <short>Provides access to the DOM Implementation for the document</short>
        <descr>
          <p>
            <var>Impl</var> is a read-only <var>TDOMImplementation</var> property that provides access to the DOM Implementation for the document.
          </p>
        </descr>
        <seealso>
          <link id="TDOMImplementation">TDOMImplementation</link>
        </seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocument.DocumentElement">
        <short>Gets the root element for the document</short>
        <descr>
          <p>
            <var>DocumentElement</var> is a read-only <var>TDOMElement</var> property that represents the root  element for the document. DocumentElement is derived using the top-level child nodes found in the document. The return value contains the first DOM Node located that contains the value <var>ELEMENT_NODE</var> in its NodeType property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement">TDOMElement</link>
          <link id="TDOMNode.NodeType">TDOMNode.NodeType</link>
          <link id="ELEMENT_NODE">ELEMENT_NODE</link>
        </seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateElement">
        <short>Creates an element in the document with the specified tag name</short>
        <descr>
          <p>
            <var>CreateElement</var> is a <var>TDOMElement</var> function used to create a new DOM Element with the tag name specified in tagName. CreateElement calls Alloc to create the DOM Element using the internal Node Pool for the document. The value in tagName is checked for a QualifedName matching a Namespace registered in the document, and added to the Namespace index if it does not already exist. CreateElement calls the AttachDefaultAttrs method in TDOMElement to add default attribute values required for the DOM Element.
          </p>
        </descr>
        <errors>
          <p>
            Raises an EDOMError exception with the exception code INVALID_CHARACTER_ERR if tagName does not contain a valid XML name.
          </p>
        </errors>
        <seealso>
          <link id="TDOMElement">TDOMElement</link>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateElement.Result">
        <short>DOM Element created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateElement.tagName">
        <short>Tag name used in the new DOM Element</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateElementBuf">
        <short>Creates an element in the document with the specified tag name</short>
        <descr>
          <p>
            <var>CreateElementBuf</var> is a <var>TDOMElement</var> function used to create a new DOM Element with the tag name specified in the Buf argument. Buf is a DOMPChar type that contains a pointer the character data for the tagName. CreateElementBuf calls Alloc to create the DOM Element using the internal Node Pool for the document. The value in Buf is checked for a QualifedName matching a Namespace registered in the document, and added to the Namespace index if it does not already exist.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement">TDOMElement</link>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateElementBuf.Result">
        <short>DOM Element created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateElementBuf.Buf">
        <short>Pointer to character data used as the tag name for the Element</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateElementBuf.Length">
        <short>Length of the values in Buf</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateDocumentFragment">
        <short>Creates a new DOM Document Fragment</short>
        <descr>
          <p>
            <var>CreateDocumentFragment</var> is a <var>TDOMDocumentFragment</var> function used to create an empty DOM Document Fragment. CreateDocumentFragment calls the Alloc method to enable memory management for the TDOMDocumentFragment class instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocumentFragment">TDOMDocumentFragment</link>
          <link id="TDOMDocument.Alloc">TDOMDocument.Alloc</link>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateDocumentFragment.Result">
        <short>DOM Document Fragment created in the method</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateTextNode">
        <short>Creates a new DOM Text node with the specified value</short>
        <descr>
          <p>
            <var>CreateTextNode</var> is a <var>TDOMText</var> function used to create a DOM Text node with the specified value. Data contains the value assigned to the new DOM Text node. CreateTextNode calls the Alloc method to enable memory management for the new TDOMText class instance. The value in Data is assigned to the NodeValue property in the TDOMText class instance.
          </p>
        </descr>
        <seealso>
          <link id="TDOMText">TDOMText</link>
          <link id="TDOMDocument.Alloc">TDOMDocument.Alloc</link>
        </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateTextNode.Result">
        <short>DOM Text node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateTextNode.data">
        <short>Value assigned to the new DOM Text node</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateTextNodeBuf">
        <short>Creates a new DOM Text node with the specified value</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateTextNodeBuf.Result">
        <short>DOM Text node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateTextNodeBuf.Buf">
        <short>Pointer to the character data assigned to the new DOM Text node</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateTextNodeBuf.Length">
        <short>Length of the buffer</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateTextNodeBuf.IgnWS">
        <short>Indicates if whitespace in the buffer is ignored</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateComment">
        <short>Creates a new DOM Comment with the specified content</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateComment.Result">
        <short>DOM Comment created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateComment.data">
        <short>Values used as the content of the DOM Comment</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateCommentBuf">
        <short>Created a new DOM Comment using the specified content</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateCommentBuf.Result">
        <short>DOM Comment created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateCommentBuf.Buf">
        <short>Pointer to character data used as the content for the comment</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateCommentBuf.Length">
        <short>Length of the buffer</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateCDATASection">
        <short>Creates a new DOM CDATA section with the specified content</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateCDATASection.Result">
        <short>DOM CDATA Section created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateCDATASection.data">
        <short>Values used as the content for the CDATA section</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateProcessingInstruction">
        <short>Creates a new DOM Processing Instruction</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateProcessingInstruction.Result">
        <short>DOM Processing Instruction created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateProcessingInstruction.target">
        <short>Target for the Processing Instruction</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateProcessingInstruction.data">
        <short>Content for the Processing Instruction</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateAttribute">
        <short>Creates a new DOM Attribute with the specified name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateAttribute.Result">
        <short>DOM Attribute node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttribute.name">
        <short>Name assigned to the DOM Attribute node</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateAttributeBuf">
        <short>Creates a new DOM Attribute with the specified name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateAttributeBuf.Result">
        <short>DOM Attribute node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeBuf.Buf">
        <short>Pointer to character data with the name for the Attribute</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeBuf.Length">
        <short>Length of the buffer</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateAttributeDef">
        <short>Creates a new Attribute with a default value</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateAttributeDef.Result">
        <short>DOM Attribute created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeDef.Buf">
        <short>Pointer to character data using as the Attribute name</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeDef.Length">
        <short>Length of the buffer</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateEntityReference">
        <short>Creates a new DOM Entity Reference for the specified name</short>
        <descr>
          <remark>
            CreateEntityReference always raises an EDOMNotSupported exception. DOM Entity References are not supported in this DOM Implementation. Entity References in an existing document should have been converted to DOM Entities during deserialization of the document.
          </remark>
        </descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateEntityReference.Result">
        <short>DOM Entity Reference created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateEntityReference.name">
        <short>Name for the DOM Entity Reference</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.GetElementsByTagName">
        <short>Gets a list of nodes with the specified tag name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetElementsByTagName.Result">
        <short>Node list created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementsByTagName.tagname">
        <short>Tag name to locate in the DOM nodes for the document</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.ImportNode">
        <short>Imports a copy of the DOM node into the current document</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.ImportNode.Result">
        <short>DOM node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.ImportNode.ImportedNode">
        <short>Node with values to import in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.ImportNode.Deep">
        <short>Indicates if the entire DOM sub-tree is included in the process</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateElementNS">
        <short>Creates a new DOM Element with the specified Namespace URI</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateElementNS.Result">
        <short>DOM Element created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateElementNS.nsURI">
        <short>Namespace URI for the qualified name</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateElementNS.QualifiedName">
        <short>Namespace Prefix and Local Name used as the tag name for the Element</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.CreateAttributeNS">
        <short>
          Creates a new Attribute with the specified Namespace URI and qualified name
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.CreateAttributeNS.Result">
        <short>DOM Attribute node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeNS.nsURI">
        <short>Namespace URI for the qualified name</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.CreateAttributeNS.QualifiedName">
        <short>Namespace Prefix and Local Name used as the name for the Attribute</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.GetElementsByTagNameNS">
        <short>Gets a list of nodes with the specified Namespace URI and local name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetElementsByTagNameNS.Result">
        <short>Node list created for nodes with the specified tag name</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementsByTagNameNS.nsURI">
        <short>Namespace URI for the specified tag name</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementsByTagNameNS.alocalName">
        <short>Local name (QualifiedName sans Prefix) for nodes included in the list</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.GetElementById">
        <short>Gets the DOM Element with the specified ID attribute value</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.GetElementById.Result">
        <short>DOM Element with the specified ID value</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.GetElementById.ElementID">
        <short>ID attribute value for the Element to locate in the method</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocument.documentURI">
        <short>Represents the DOM Level 3 Document URI</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TDOMDocument.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMDocument.Destroy">
        <short>Destructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMDocument.AddID">
        <short>Adds an ID Attribute value to a hash list used in the Document</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocument.AddID.Result">
        <short>True if the ID value was added, False if it already exists</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMDocument.AddID.Attr">
        <short>DOM Attribute node with the ID value to add to the hash list</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocument.Names">
        <short>Hash table representing qualified names used in the document</short>
        <descr>
          <p>
            <var>Names</var> is a read-only <var>THashTable</var> property used to store QualifiedName values used in the DOM Document. Names is updated when DOM Elements or Attributes with Namespace URIs and qualified names are created in the document. It is also updated (re-hashed) when the Prefix property in the DOM Element or Attribute is changed.
          </p>
        </descr>
        <seealso>
          <link id="TDOMElement">TDOMElement</link>
          <link id="TDOMAttr">TDOMAttr</link>
          <link id="TDOMNode_NS">TDOMNode_NS</link>
          <link id="TDOMNode.Prefix">TDOMNode.Prefix</link>
          <link id="#lazutils.laz2_xmlutils.THashTable">THashTable</link>
        </seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TXMLDocument">
        <short>Implements an XML Document</short>
        <descr>
          <p>
            <var>TXMLDocument</var> is a <var>TDOMDocument</var> descendant that implements an XML Document. TXMLDocument provides extensions to the DOM Document interface needed when working with an XML Document. This includes the XMLVersion, Encoding, StylesheetType, and StylesheetHRef properties. Overridden methods are also provided to handle creation of CDATA sections and Processing Instructions using valid XML names for the XMLVersion used in the document.
          </p>
        </descr>
        <seealso>
          <link id="TDOMDocument">TDOMDocument</link>
        </seealso>
      </element>

      <!-- variable Visibility: private -->
      <element name="TXMLDocument.FXMLVersion"/>

      <!-- procedure Visibility: private -->
      <element name="TXMLDocument.SetXMLVersion">
        <short>Sets the value for the XMLVersion property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TXMLDocument.SetXMLVersion.aValue">
        <short>New value for the XMLVersion property</short>
      </element>

      <!-- variable Visibility: public -->
      <element name="TXMLDocument.Encoding">
        <short>Encoding used for the XML Document</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: public -->
      <element name="TXMLDocument.StylesheetType">
        <short>Type of Stylesheet represented by the StylesheetHRef property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: public -->
      <element name="TXMLDocument.StylesheetHRef">
        <short>URL for the Stylesheet to use for the Document</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TXMLDocument.CreateCDATASection">
        <short>Creates a new CDATA section in the document</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TXMLDocument.CreateCDATASection.Result">
        <short>DOM CDATA section created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TXMLDocument.CreateCDATASection.data">
        <short>Character data to include in the CDATA section</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TXMLDocument.CreateProcessingInstruction">
        <short>Creates a new Processing Instruction in the document</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TXMLDocument.CreateProcessingInstruction.Result">
        <short>DOM Processing Instruction created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TXMLDocument.CreateProcessingInstruction.target">
        <short>Target for the Processing Instruction</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TXMLDocument.CreateProcessingInstruction.data">
        <short>Data for the Processing Instruction</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TXMLDocument.CreateEntityReference">
        <short>Creates a new Entity Reference in the document</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TXMLDocument.CreateEntityReference.Result">
        <short>DOM Entity Reference created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TXMLDocument.CreateEntityReference.name">
        <short>Name for the Entity Reference</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TXMLDocument.XMLVersion">
        <short>XML Version number supported in the document</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- record type Visibility: default -->
      <element name="TNamespaceInfo">
        <short>Represents Namespace Information used in DOM Node specializations</short>
        <descr>
          <p>
            <var>TNamespaceInfo</var> is a <var>packed record</var> type used to represent Namespace Information used in DOM Node specializations. Members in the record are used to record the Index Position, PrefixLength, and a hash value for a Qualified Name assigned to namespaced DOM Elements and Attributes. TNamespaceInfo is the type used for the NSI property in TDOMNode_NS.
          </p>
          <p>
            Please note that the NSIndex and PrefixLength members are declared as Word values. This limits the number of namespaces per document and the prefix length to 65535. It is believed that higher values are only found in deliberately malformed documents.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_NS.NSI">TDOMNode_NS.NSI</link>
          <link id="TDOMDocument">TDOMDocument</link>
          <link id="TDOMElement">TDOMElement</link>
        </seealso>
      </element>

      <!-- variable Visibility: default -->
      <element name="TNamespaceInfo.NSIndex">
        <short>Index position for the Namespace</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: default -->
      <element name="TNamespaceInfo.PrefixLen">
        <short>Length of the Namespace Prefix</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: default -->
      <element name="TNamespaceInfo.QName">
        <short>Qualified Name for the Namespace</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- enumeration type Visibility: default -->
      <element name="TAttrDataType">
        <short>Enumeration with values for attribute types used in DOM Nodes</short>
        <descr>
          <remark>
            This will eventually be altered or replaced when DOM Level 3 TypeInfo Interface support is introduced.
          </remark>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TAttrDataType.dtCdata">
        <short>Attribute contains a CDATA value</short>
      </element>
      <element name="TAttrDataType.dtId">
        <short>Attribute contains an ID value</short>
      </element>
      <element name="TAttrDataType.dtIdRef">
        <short>Attribute contains an ID reference</short>
      </element>
      <element name="TAttrDataType.dtIdRefs">
        <short>Attribute contains multiple ID references</short>
      </element>
      <element name="TAttrDataType.dtEntity">
        <short>Attribute contains an Entity</short>
      </element>
      <element name="TAttrDataType.dtEntities">
        <short>Attribute contains several Entities</short>
      </element>
      <element name="TAttrDataType.dtNmToken">
        <short>Attribute contains a Name token</short>
      </element>
      <element name="TAttrDataType.dtNmTokens">
        <short>Attribute contains several Name tokens</short>
      </element>
      <element name="TAttrDataType.dtNotation">
        <short>Attribute contains a Notation</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNode_NS">
        <short>Implements a DOM Node with Namespace support</short>
        <descr>
          <p>
            <var>TDOMNode_NS</var> is a <var>TDOMNode_WithChildren</var> descendant which provides support for Namespaces in DOM Nodes.
          </p>
          <p>
            TDOMNode_NS extends the ancestor class to implement the use of XML Namespace as required in DOM Level 2. Overridden methods are provided for read and write accessors in the class which access the NodeName, LocalName, NamespaceURI and Prefix properties. It also implements the NSI property which is used to provide information about the Namespaces used in DOM Node specializations.
          </p>
          <p>
            TDOMNode_NS is the ancestor class for the TDOM Attr and TDOMElement Node types.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_WithChildren">TDOMNode_WithChildren</link>
          <link id="TDOMElement">TDOMElement</link>
          <link id="TDOMAttr">TDOMAttr</link>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNode_NS.FNSI" link="TDOMNode_NS.NSI"/>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_NS.GetNodeName" link="TDOMNode.NodeName">
        <short>Gets the value for the NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_NS.GetNodeName.Result">
        <short>Value for the NodeName property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_NS.GetLocalName" link="TDOMNode.LocalName">
        <short>Gets the value for the LocalName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_NS.GetLocalName.Result">
        <short>Value for the LocalName property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_NS.GetNamespaceURI" link="TDOMNode.NamespaceURI">
        <short>Gets the value for the NamespaceURI property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_NS.GetNamespaceURI.Result">
        <short>Value for the NamespaceURI property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNode_NS.GetPrefix" link="TDOMNode.Prefix">
        <short>Gets the value for the Prefix property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_NS.GetPrefix.Result">
        <short>Value for the Prefix property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMNode_NS.SetPrefix" link="TDOMNode.Prefix">
        <short>Sets the value for the Prefix property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_NS.SetPrefix.Value">
        <short>New value for the Prefix property</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMNode_NS.SetNSI"  link="TDOMNode.NamespaceURI">
        <short>
          Stores the specified Namespace URI and Prefix length in the Namespace Information for the DOM Document
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_NS.SetNSI.nsUri">
        <short>Namespace URI added or updated in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_NS.SetNSI.ColonPos">
        <short>
          Length of the prefix used in qualified names for the namespace
        </short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNode_NS.CompareName">
        <short>Compares the specified value to the NodeName for the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNode_NS.CompareName.Result">
        <short>
          Difference between the ordinal character values for the first non-matching character in the compared names.
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNode_NS.CompareName.AName">
        <short>Value compared to the NodeName for the DOM node</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNode_NS.NSI">
        <short>Provides access to Namespace information for the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMAttr">
        <short>Implements a DOM Node for attributes with Namspace support</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMAttr.FOwnerElement"/>
      <element name="TDOMAttr.FDataType"/>

      <!-- function Visibility: protected -->
      <element name="TDOMAttr.GetNodeValue"  link="TDOMNode.NodeValue">
        <short>Gets the value for the NodeValue property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttr.GetNodeValue.Result">
        <short>Value for the NodeValue property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMAttr.GetNodeType" link="TDOMNode.NodeType">
        <short>Gets the value for the NodeType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttr.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMAttr.GetSpecified" link="TDOMAttr.Specified">
        <short>Gets the value for the Specified property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttr.GetSpecified.Result">
        <short>Value for the Specified property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMAttr.GetIsID" link="TDOMAttr.IsID">
        <short>Gets the value for the IsID property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttr.GetIsID.Result">
        <short>Value for the IsID property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMAttr.SetNodeValue" link="TDOMNode.NodeValue">
        <short>Sets the value for the NodeValue property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttr.SetNodeValue.AValue">
        <short>New value for the NodeValue property</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMAttr.Destroy">
        <short>Destructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMAttr.CloneNode" link="TDOMNode.CloneNode">
        <short>Creates a copy of the DOM Attribute</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttr.CloneNode.Result">
        <short>DOM Attribute created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttr.CloneNode.deep">
        <short>
          Provided to remain compatible with the interface defined in DOM Node; not used in DOM Attributes
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttr.CloneNode.ACloneOwner">
        <short>Document that owns the new DOM Attribute node</short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.Name">
        <short>Represents the name for the DOM Attribute</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.Specified">
        <short>Indicates if the value for DOM Attribute was explicitly assigned</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.Value">
        <short>Value for the DOM Attribute</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.OwnerElement">
        <short>DOM Element that owns the DOM Attribute node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.IsID">
        <short>Indicates if the DOM Attribute node represents an ID Data type</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttr.DataType">
        <short>Data type for value in the DOM Attribute node</short>
        <descr>
          <remark>
            DataType is an extension to the DOM specification. It is likely to be altered or removed when support is added for the DOM Level 3 TypeInformation Interface.
          </remark>
        </descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMElement">
        <short>Implements the DOM Element interface from the DOM specification</short>
        <descr>
          <p>
            <var>TDOMElement</var> is a <var>TDOMNode_NS</var> descendant that implements the DOM Element interface from the DOM specification. TDOMElement represents an element in an HTML or XML document. It inherits the capabilities defined in ancestor classes, and provides additional methods and properties need for the DOM Element interface.
          </p>
          <p>
            Methods are provided to access Attributes using the Node interface defined in TDOMNode, or as a simple string value. Namespaces are supported for both the element and its attributes. The Normalize method is overridden to include  normalization for values  in the Attributes property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode_NS">TDOMNode_NS</link>
          <link id="TDOMNode">TDOMNode</link>
        </seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMElement.FAttributes" link="TDOMElement.Attributes"/>

      <!-- function Visibility: protected -->
      <element name="TDOMElement.GetNodeType" link="TDOMNode.NodeType">
        <short>Gets the value for the NodeType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMElement.GetAttributes" link="TDOMElement.Attributes">
        <short>Gets the value for the Attributes property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetAttributes.Result">
      </element>
      <short>Value for the Attributes property</short>

      <!-- procedure Visibility: protected -->
      <element name="TDOMElement.AttachDefaultAttrs">
        <short>
          Creates DOM Attributes for defaults needed in a Namespaced DOM Element
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMElement.InternalLookupPrefix">
        <short>Gets the Namespace Prefix used for the specified Namespace URI</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.InternalLookupPrefix.Result">
        <short>Prefix used for the Namespace in the current or ancestor DOM Element</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.InternalLookupPrefix.nsURI">
        <short>Namespace URI to locate in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.InternalLookupPrefix.Original">
        <short>Original DOM Element to use for the Lookup</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMElement.RestoreDefaultAttr">
        <short>Restores Namespaced Attributes to the default values for the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.RestoreDefaultAttr.AttrDef">
        <short>DOM Attribute used as the baseline</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMElement.Destroy">
        <short>Destructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.CloneNode" link="TDOMNode.CloneNode">
        <short>Creates a DOM Node that is a copy of the DOM Element</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.CloneNode.Result">
        <short>DOM Node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.CloneNode.deep">
        <short>Indicates if the entire DOM sub-tree is copied for the DOM Element</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.CloneNode.ACloneOwner">
        <short>DOM Document that owns the new Node(s) created in the method</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.IsEmpty">
        <short>Indicates if the DOM Element has content</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.IsEmpty.Result">
        <short>True when the DOM Element does not have any child nodes</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMElement.Normalize" link="TDOMNode.Normalize">
        <short>
          Performs normalization for Text nodes and Attributes in the DOM Element
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMElement.TagName">
        <short>The qualified name used as the Tag name for the DOM Element</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetAttribute" link="TDOMElement.AttribStrings">
        <short>Gets the value for the AttribStrings property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetAttribute.Result">
        <short>Value for the AttribStrings property</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttribute.name">
        <short>Name for the DOM Attribute requested in the method</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMElement.SetAttribute" link="TDOMElement.AttribStrings">
        <short>Sets the value in the AttribStrings property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttribute.name">
        <short>Name of the DOM Attribute updated in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttribute.value">
        <short>New value for the item in the AttribStrings property</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMElement.RemoveAttribute">
        <short>Removes the DOM Attribute with the specified name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.RemoveAttribute.name">
        <short>Name of the DOM Attribute removed in the method</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetAttributeNode">
        <short>Gets the DOM Attribute node with the specified name</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetAttributeNode.Result">
        <short>DOM Attribute node with the specified name</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttributeNode.name">
        <short>Name for the DOM Attribute in the return value</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.SetAttributeNode">
        <short>
          Stores the new DOM Attribute node to an existing Attribute with the same name
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.SetAttributeNode.Result">
        <short>DOM Attribute node updated in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttributeNode.NewAttr">
        <short>DOM Attribute node with the new value stored in Attributes</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.RemoveAttributeNode">
        <short>
          Removes the specified DOM Attribute node from the Attributes for the Element
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.RemoveAttributeNode.Result">
        <short>DOM Attribute node removed in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.RemoveAttributeNode.OldAttr">
        <short>DOM Attribute node to remove from the Attributes for the Element</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetElementsByTagName">
        <short>
          Gets a list of DOM nodes with the specified name in the sub-tree for the Element
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetElementsByTagName.Result">
        <short>DOM Node list with the specified tag name</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetElementsByTagName.name">
        <short>Tag name to locate in the DOM sub-tree</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetAttributeNS">
        <short>
          Gets the value for an Attribute with the specified Namespace URI and local name
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetAttributeNS.Result">
        <short>Value for the DOM Attribute requested in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttributeNS.nsURI">
        <short>Namespace URI for the Attribute requested in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttributeNS.aLocalName">
        <short>Local name for the Attribute requested in the method</short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMElement.SetAttributeNS">
        <short>
          Sets the value for the DOM Attribute with the specified Namespace URI and qualified name
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttributeNS.nsURI">
        <short>Namespace URI for the DOM Attribute updated in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttributeNS.qualifiedName">
        <short>QualifiedName for the DOM Attribute updated in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttributeNS.value">
        <short>
          New value for the DOM Attribute with the specified Namespace URI and Qualified Name
        </short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TDOMElement.RemoveAttributeNS">
        <short>
          Removes the DOM Attribute with the specified Namespace URI and local name
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.RemoveAttributeNS.nsURI">
        <short>Namespace URI for the DOM Attribute</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.RemoveAttributeNS.aLocalName">
        <short>Local name for the DOM Attribute</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetAttributeNodeNS">
        <short>
          Gets the DOM Attribute node with the specified Namespace URI and local name
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetAttributeNodeNS.Result">
        <short>DOM Attribute node with the requested Namespace URI and local name</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttributeNodeNS.nsURI">
        <short>Namespace URI for the DOM Attribute</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetAttributeNodeNS.aLocalName">
        <short>Local name for the DOM Attribute</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.SetAttributeNodeNS">
        <short>
          Stores the new DOM Attribute node in an existing Namespaced Attribute node
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.SetAttributeNodeNS.Result">
        <short>Existing DOM Attribute node updated in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.SetAttributeNodeNS.newAttr">
        <short>
          DOM Attribute node with the Namespace URI, Local name, and value stored in the method
        </short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.GetElementsByTagNameNS">
        <short>
          Gets a Node list with Elements having the specified Namespace URI and local name
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.GetElementsByTagNameNS.Result">
        <short>DOM Node list created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetElementsByTagNameNS.nsURI">
        <short>Namespace URI for the requested nodes</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.GetElementsByTagNameNS.aLocalName">
        <short>Local name for the requested nodes</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.hasAttribute">
        <short>
          Indicates if the Attributes property contains an item with the specified name
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.hasAttribute.Result">
        <short>
          True when an Attribute with the specified name exists in the Attributes property
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.hasAttribute.name">
        <short>Name of the Attribute to locate in the method</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.hasAttributeNS">
        <short>
          Indicates if Attributes contains an attribute with the specified Namespace URI and local name
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.hasAttributeNS.Result">
        <short>
          True Attributes contains an entry with the specified Namespace URI and local name
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.hasAttributeNS.nsURI">
        <short>Namespace URI for the DOM Attribute</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.hasAttributeNS.aLocalName">
        <short>Local name for the DOM Attribute</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMElement.HasAttributes">
        <short>Indicates if the Attributes property contains any DOM Attribute nodes</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMElement.HasAttributes.Result">
        <short>
          False when Attributes has not been assigned, or has a Length of 0 (zero)
        </short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMElement.AttribStrings">
        <short>Provides indexed access to Attributes and their value as a String</short>
        <descr>
          <p>
            <var>AttribStrings</var> is an indexed <var>DOMString</var> property that provides access to the value for a DOM Attribute by its Name. AttribStrings is an extension to the DOM specification. It provides a simpler mechanism for reading and writing Attribute values than the methods provided in the DOM Node interface. It is especially useful for DOM documents where Attributes are known to contain simple DOMString data types (like <b>HTML</b>).
          </p>
          <p>
            Read and write access to AttribStrings is redirected to the Attributes property. When reading a DOM Attribute, the value is an empty string (<b>''</b>) if the Attributes property does not contain an Attribute node with the requested Name. When writing a DOM Attribute, the Attribute node is created if it does not exist already.
          </p>
          <p>
            AttribStrings does not take Qualified names or Namespaces into consideration when accessing values in the Attributes property. Use the GetAttributeNS, SetAttributeNS, or RemoveAttributeNS methods when Namespace support is required for DOM Attributes.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode.Attributes">TDOMNode.Attributes</link>
          <link id="TDOMElement.GetAttributeNS">TDOMElement.GetAttributeNS</link>
          <link id="TDOMElement.SetAttributeNS">TDOMElement.SetAttributeNS</link>
          <link id="TDOMElement.RemoveAttributeNS">TDOMElement.RemoveAttributeNS</link>
        </seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMElement.AttribStrings.Name">
        <short>Name of the DOM Attribute accessed in the indexed property</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMText">
        <short>Implements the DOM Text interface from the DOM specification</short>
        <descr>
          <p>
            <var>TDOMText</var> is a <var>TDOMCharacterData</var> descendant that implements the DOM Text interface from the DOM specification. TDOMText represents the textual content (called  character data in XML) for a DOM Element or Attribute. It provides overridden methods which implement the NodeName and NodeValue properties as required for the DOM Node specialization.
          </p>
          <p>
            Adjacent TDOMText nodes may be combined when the Normalize method is called for the ParentNode, and Text nodes with only whitespace in their content may be removed. This is the case when the DOM node has the value <var>nfIgnorableWS</var> in its Flags property.
          </p>
        </descr>
        <seealso>
          <link id="TDOMCharacterData">TDOMCharacterData</link>
          <link id="TDOMNode.Normalize">TDOMNode.Normalize</link>
          <link id="TDOMNode.Flags">TDOMNode.Flags</link>
          <link id="TNodeFlags">TNodeFlags</link>
          <link id="TNodeFlagEnum">TNodeFlagEnum</link>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMText.GetNodeType">
        <short>Gets the value for the NodeType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMText.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMText.GetNodeName">
        <short>Gets the value for the NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMText.GetNodeName.Result">
        <short>Value for the NodeName property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMText.SetNodeValue">
        <short>Sets the value for the NodeValue property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMText.SetNodeValue.aValue">
        <short>New value for the NodeValue property</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMText.CloneNode">
        <short>Makes a copy of the DOM Node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMText.CloneNode.Result">
        <short>New DOM Node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMText.CloneNode.deep">
        <short>
          Indicates if child nodes in the sub-tree are included in the cloned DOM node
        </short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMText.CloneNode.ACloneOwner">
        <short>DOM Document used to create the cloned DOM node</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMText.SplitText">
        <short>
          Splits the textual content at the specified offset and creates a new DOM Text node
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMText.SplitText.Result">
        <short>New DOM node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMText.SplitText.offset">
        <short>Offset in the textual content where the Text node is split</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMText.IsElementContentWhitespace">
        <short>
          Indicates if the textual content for the node is whitespace characters
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMText.IsElementContentWhitespace.Result">
        <short>True when nfIgnorableWS  is included in the Flags for the DOM node</short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMComment">
        <short>Implements the DOM Comment interface from the DOM specification</short>
        <descr>
          <p>
            TDOMComment is a TDOMCharacterData descendant that implements the DOM Comment interface from the DOM specification. TDOMComment provides overridden methods needed to implement the NodeType and NodeName properties as required for the DOM Node specialization.
          </p>
          <p>
            TDOMComment represents the textual content for a comment that appears between the '&lt;!--' and '--&gt;' delimiters. This is the definition for a comment as defined in the XML 1.0 specification and in HTML. The NodeValue can contain any values except the start and end delimiters for a comment.
          </p>
        </descr>
        <seealso>
          <link id="TDOMCharacterData">TDOMCharacterData</link>
          <link id="TDOMComment.GetNodeType">TDOMComment.GetNodeType</link>
          <link id="TDOMComment.GetNodeName">TDOMComment.GetNodeType</link>
          <link id="TDOMComment.CloneNode">TDOMComment.CloneNode</link>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMComment.GetNodeType">
        <short>Gets the value for the NodeType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMComment.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMComment.GetNodeName">
        <short>Gets the value for the NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMComment.GetNodeName.Result">
        <short>Value for the NodeName property</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMComment.CloneNode" link="TDOMNode.CloneNode">
        <short>Makes copy of the DOM Comment node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMComment.CloneNode.Result">
        <short>DOM node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMComment.CloneNode.deep">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMComment.CloneNode.ACloneOwner">
        <short></short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMCDATASection">
        <short>Implements the DOM CDataSection  interface from the DOM specification</short>
        <descr>
          <p>
            <var>TDOMCDATASection</var> is a <var>TDOMText</var> descendant that implements the DOM CDATASection interface from the DOM specification. TDOMCDATASection provides overridden methods needed to implement the NodeType and NodeName properties as required for the DOM Node specialization.
          </p>
          <p>
            TDOMCDATASection is used to escape text that contains characters that would otherwise be regarded as markup in a DOM document. TDOMCDATASection contains the textual content as it appears between the '&lt;![CDATA[' and ']]&gt;' delimiters. Its primary purpose is to include material such as XML fragments, without needing to escape all of the markup.
          </p>
          <p>
            Please Note: Markup (other than the ending delimiter) is ignored in a CDATASection; This means that the ending delimiter cannot be included in a CDATA Section. Character numeric entity references cannot be used as an escape mechanism in a CDATA Section.
          </p>
        </descr>
        <seealso>
          <link id="TDOMText">TDOMText</link>
          <link id="TDOMCDATASection.GetNodeType">TDOMCDATASection.GetNodeType</link>
          <link id="TDOMCDATASection.GetNodeName">TDOMCDATASection.GetNodeName</link>
          <link id="TDOMCDATASection.CloneNode">TDOMCDATASection.CloneNode</link>
        </seealso>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMCDATASection.GetNodeType" link="TDOMNode.NodeType">
        <short>Gets the value for the NodeType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCDATASection.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMCDATASection.GetNodeName" link="TDOMNode.NodeName">
        <short>Gets the value for the NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCDATASection.GetNodeName.Result">
        <short>Value for the NodeName property</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMCDATASection.CloneNode" link="TDOMNode.CloneNode">
        <short>Makes a copy of the DOM CDATA Section</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMCDATASection.CloneNode.Result">
        <short>DOM Node created with the value for the CDATA Section</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCDATASection.CloneNode.deep">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMCDATASection.CloneNode.ACloneOwner">
        <short></short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMDocumentType">
        <short>Implements the DOM DocumentType interface from the DOM specification</short>
        <descr>
          TDOMDocumentType is a TDOMNode descendant that implements the DOM DOcumentType Interface from the DOM specification.
        </descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMDocumentType.FName"/>
      <element name="TDOMDocumentType.FPublicID"/>
      <element name="TDOMDocumentType.FSystemID"/>
      <element name="TDOMDocumentType.FInternalSubset"/>
      <element name="TDOMDocumentType.FEntities"/>
      <element name="TDOMDocumentType.FNotations"/>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentType.GetEntities">
        <short>Gets the value for the Entities property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentType.GetEntities.Result">
        <short>Value for the Entities property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentType.GetNotations">
        <short>Gets the value for the Notations property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentType.GetNotations.Result">
        <short>Value for the Notations property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentType.GetNodeType">
        <short>Gets the value for the NodeType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentType.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMDocumentType.GetNodeName">
        <short>Gets the value for the NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMDocumentType.GetNodeName.Result">
        <short>Value for the NodeName property</short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TDOMDocumentType.Destroy">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.Name">
        <short>Name for the Document Type declaration (used as the root element)</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.Entities">
        <short>Entities declared in the Document Type declaration</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.Notations">
        <short>Notations declared in the Document Type declaration</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.PublicID">
        <short>Public Identifier for the Document Type declaration</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.SystemID">
        <short>System Identifier for the Document Type declaration</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMDocumentType.InternalSubset">
        <short>The internal subset for the Document Type declaration</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMNotation">
        <short>Implements the DOM Notation interface from the DOM specification</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMNotation.FName"/>
      <element name="TDOMNotation.FPublicID"/>
      <element name="TDOMNotation.FSystemID"/>

      <!-- function Visibility: protected -->
      <element name="TDOMNotation.GetNodeType">
        <short>Gets the value for the NodeType property</short>
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNotation.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMNotation.GetNodeName">
        <short>Gets the value for the NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNotation.GetNodeName.Result">
        <short>Value for the NodeName property</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMNotation.CloneNode">
        <short>Makes a copy of the DOM Node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMNotation.CloneNode.Result">
        <short>DOM Node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNotation.CloneNode.deep">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMNotation.CloneNode.ACloneOwner">
        <short></short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNotation.PublicID">
        <short>Public Identifier for the Document Type declaration</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMNotation.SystemID">
        <short>System Identifier for the Document Type declaration</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMEntity">
        <short>Implements the DOM Entity interface from the DOM specification</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMEntity.FName"/>
      <element name="TDOMEntity.FPublicID"/>
      <element name="TDOMEntity.FSystemID"/>
      <element name="TDOMEntity.FNotationName"/>

      <!-- function Visibility: protected -->
      <element name="TDOMEntity.GetNodeType">
        <short>Gets the value for the NodeType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntity.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMEntity.GetNodeName">
        <short>Gets the value for the NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntity.GetNodeName.Result">
        <short>Value for the NodeName property</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMEntity.CloneNode">
        <short>Makes a copy of the DOM node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntity.CloneNode.Result">
        <short>DOM node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMEntity.CloneNode.deep">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMEntity.CloneNode.aCloneOwner">
        <short></short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMEntity.PublicID">
        <short>Public Identifier for the Entity</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMEntity.SystemID">
        <short>System Identifier for the Entity</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMEntity.NotationName">
        <short>Notation name for the Entity</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMEntityReference">
        <short>
          Implements the DOM EntityReference interface from the DOM specification
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMEntityReference.FName"/>

      <!-- function Visibility: protected -->
      <element name="TDOMEntityReference.GetNodeType">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntityReference.GetNodeType.Result">
        <short></short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMEntityReference.GetNodeName">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntityReference.GetNodeName.Result">
        <short></short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMEntityReference.CloneNode">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMEntityReference.CloneNode.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMEntityReference.CloneNode.deep">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMEntityReference.CloneNode.ACloneOwner">
        <short></short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMProcessingInstruction">
        <short>
          Implements the DOM ProcessingInstruction interface from the DOM specification
        </short>
        <descr>
          <p>
            <var>TDOMProcessingInstruction</var> is a <var>TDOMNode</var> descendant that implements the DOM ProcessingInstruction Interface from the DOM specification. TDOMProcessingInstruction provides access to an XML Processor-specific instruction that occurs in a DOM Document.
          </p>
          <p>
            TDOMProcessingInstruction provides overridden methods used as the read and write access specifiers for the DOM Node specialization. It also contains properties needed to represent the Target and Data for the DOM ProcessingInstruction.
          </p>
        </descr>
        <seealso>
          <link id="TDOMNode">TDOMNode</link>
          <link id="TDOMProcessingInstruction.Target">
            TDOMProcessingInstruction.Target
          </link>
          <link id="TDOMProcessingInstruction.Data">
            TDOMProcessingInstruction.Data
          </link>
        </seealso>
      </element>

      <!-- variable Visibility: private -->
      <element name="TDOMProcessingInstruction.FTarget" link="TDOMProcessingInstruction.Target"/>
      <element name="TDOMProcessingInstruction.FNodeValue" link="TDOMProcessingInstruction.Data"/>

      <!-- function Visibility: protected -->
      <element name="TDOMProcessingInstruction.GetNodeType" link="TDOMNode.NodeType">
        <short>Gets the value for the NodeType property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMProcessingInstruction.GetNodeType.Result">
        <short>Value for the NodeType property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMProcessingInstruction.GetNodeName" link="TDOMNode.NodeName">
        <short>Gets the value for the NodeName property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMProcessingInstruction.GetNodeName.Result">
        <short>Value for the NodeName property</short>
      </element>

      <!-- function Visibility: protected -->
      <element name="TDOMProcessingInstruction.GetNodeValue" link="TDOMNode.NodeValue">
        <short>Gets the value for the NodeValue property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMProcessingInstruction.GetNodeValue.Result">
        <short>Value for the NodeValue property</short>
      </element>

      <!-- procedure Visibility: protected -->
      <element name="TDOMProcessingInstruction.SetNodeValue" link="TDOMNode.NodeValue">
        <short>Sets the value for the NodeValue property</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMProcessingInstruction.SetNodeValue.AValue">
        <short>New value for the NodeValue property</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMProcessingInstruction.CloneNode" link="TDOMNode.CloneNode">
        <short>Makes a copy of the DOM Node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMProcessingInstruction.CloneNode.Result">
        <short>DOM Node created in the method</short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMProcessingInstruction.CloneNode.deep">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMProcessingInstruction.CloneNode.ACloneOwner">
        <short></short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMProcessingInstruction.Target">
        <short>Represent the Target for the DOM ProcessingInstruction node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMProcessingInstruction.Data">
        <short>Represents the Data for the DOM ProcessingInstruction node</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- enumeration type Visibility: default -->
      <element name="TAttrDefault">
        <short></short>
        <descr>
          Attribute declaration - Attr descendant which carries rudimentary type info must be severely improved while developing DOM Level 3.
        </descr>
        <seealso></seealso>
      </element>

      <!-- enumeration value Visibility: default -->
      <element name="TAttrDefault.adImplied">
        <short></short>
      </element>

      <!-- enumeration value Visibility: default -->
      <element name="TAttrDefault.adDefault">
        <short></short>
      </element>

      <!-- enumeration value Visibility: default -->
      <element name="TAttrDefault.adRequired">
        <short></short>
      </element>

      <!-- enumeration value Visibility: default -->
      <element name="TAttrDefault.adFixed">
        <short></short>
      </element>

      <!-- class Visibility: default -->
      <element name="TDOMAttrDef">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: protected -->
      <element name="TDOMAttrDef.FExternallyDeclared"/>
      <element name="TDOMAttrDef.FDefault"/>
      <element name="TDOMAttrDef.FTag"/>
      <element name="TDOMAttrDef.FEnumeration"/>

      <!-- function Visibility: public -->
      <element name="TDOMAttrDef.AddEnumToken">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttrDef.AddEnumToken.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttrDef.AddEnumToken.Buf">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttrDef.AddEnumToken.Len">
        <short></short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMAttrDef.HasEnumToken">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttrDef.HasEnumToken.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttrDef.HasEnumToken.aValue">
        <short></short>
      </element>

      <!-- function Visibility: public -->
      <element name="TDOMAttrDef.CloneNode">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TDOMAttrDef.CloneNode.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttrDef.CloneNode.deep">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TDOMAttrDef.CloneNode.ACloneOwner">
        <short></short>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttrDef.Default">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttrDef.ExternallyDeclared">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- property Visibility: public -->
      <element name="TDOMAttrDef.Tag">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- pointer type Visibility: default -->
      <element name="PExtent">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- record type Visibility: default -->
      <element name="TExtent">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- variable Visibility: default -->
      <element name="TExtent.Next">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- class Visibility: default -->
      <element name="TNodePool">
        <short>Provides custom memory management when DOM Nodes are created</short>
        <descr>
          <p>
            <var>TNodePool</var> is a class used to provide custom memory management when DOM Nodes are created in a DOM Document. Each TNodePool instance manages objects with the same instance size (and may be different classes). TDOMDocument provides an internal array of TNodePool instances that are maintained when DOM Nodes are created in its Alloc method.
          </p>
        </descr>
        <seealso>
          <link id="TNodePoolArray">TNodePoolArray</link>
          <link id="TDOMNode">TDOMNode</link>
          <link id="TDOMDocument.Alloc">TDOMDocument.Alloc</link>
        </seealso>
      </element>

      <!-- variable Visibility: private -->
      <element name="TNodePool.FCurrExtent"/>
      <element name="TNodePool.FCurrExtentSize"/>
      <element name="TNodePool.FElementSize"/>
      <element name="TNodePool.FCurrBlock"/>
      <element name="TNodePool.FFirstFree"/>

      <!-- procedure Visibility: private -->
      <element name="TNodePool.AddExtent">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TNodePool.AddExtent.AElemCount">
        <short></short>
      </element>

      <!-- constructor Visibility: public -->
      <element name="TNodePool.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TNodePool.Create.AElementSize">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TNodePool.Create.AElementCount">
        <short></short>
      </element>

      <!-- destructor Visibility: public -->
      <element name="TNodePool.Destroy">
        <short>Destructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function Visibility: public -->
      <element name="TNodePool.AllocNode">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="TNodePool.AllocNode.Result">
        <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="TNodePool.AllocNode.AClass">
        <short></short>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TNodePool.FreeNode">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- argument Visibility: default -->
      <element name="TNodePool.FreeNode.ANode">
        <short></short>
      </element>

      <!-- pointer type Visibility: default -->
      <element name="PNodePoolArray">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- array type Visibility: default -->
      <element name="TNodePoolArray">
        <short>Implements an array of TNodePool instances</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <!-- constant Visibility: default -->
      <element name="stduri_xml">
        <short>Namespace URI for the xml prefix</short>
        <descr>
          <p>
            <var>stduri_xml</var> is a <var>DOMString</var> constant that contains the Namespace URI bound to the <b>xml</b> Namespace prefix. stduri_xml and stduri_xmlns are used to set the default Namespaces prefixes and URIs in TDOMDocument:
          </p>
          <table>
            <tr>
              <td><b>Prefix</b></td>
              <td><b>Namespace URI</b></td>
            </tr>
            <tr>
              <td>xml</td>
              <td>http://www.w3.org/XML/1998/namespace</td>
            </tr>
            <tr>
              <td>xmlns</td>
              <td>http://www.w3.org/2000/xmlns/</td>
            </tr>
          </table>
        </descr>
        <seealso>
          <link id="stduri_xmlns">stduri_xmlns</link>
          <link id="TNamespaces">TNamespaces</link>
          <link id="TDOMDocument">TDOMDocument</link>
        </seealso>
      </element>

      <!-- constant Visibility: default -->
      <element name="stduri_xmlns">
        <short>Namespace URI for the xmlns prefix</short>
        <descr>
          <p>
            <var>stduri_xmlns</var> is a <var>DOMString</var> constant that contains the Namespace URI bound to the <b>xmlns</b> Namespace prefix. stduri_xml and stduri_xmlns are used to set the default Namespaces prefixes and URIs in TDOMDocument:
          </p>
          <table>
            <tr>
              <td><b>Prefix</b></td>
              <td><b>Namespace URI</b></td>
            </tr>
            <tr>
              <td>xml</td>
              <td>http://www.w3.org/XML/1998/namespace</td>
            </tr>
            <tr>
              <td>xmlns</td>
              <td>http://www.w3.org/2000/xmlns/</td>
            </tr>
          </table>
        </descr>
        <seealso>
          <link id="stduri_xml">stduri_xml</link>
          <link id="TNamespaces">TNamespaces</link>
          <link id="TDOMDocument">TDOMDocument</link>
        </seealso>
      </element>

      <element name="StrToXMLValue">
        <short>Converts a string to it representation as XML character data</short>
        <descr>
          <p>
            <var>StrToXMLValue</var> is a <var>String</var> function used to convert the value in s to its representation as valid XML character data. The XML specification has five "predefined entities" that represent special characters. StrToXMLValue ensures that any of these characters in s are converted to their representation as a Character Entity, including:
          </p>
          <table>
            <tr>
              <td><b>Character</b></td>
              <td><b>Entity Name</b></td>
              <td><b>Unicode Codepoint</b></td>
              <td><b>Description</b></td>
            </tr>
            <tr>
              <td>&amp;quot;</td>
              <td>&quot;</td>
              <td>U+0022 (Decimal 34)</td>
              <td>Double quotation Mark</td>
            </tr>
            <tr>
              <td>&amp;amp;</td>
              <td>&amp;</td>
              <td>U+0026 (Decimal 38)</td>
              <td>Ampersand</td>
            </tr>
            <tr>
              <td>&amp;apos;</td>
              <td>&apos;</td>
              <td>U+0027 (Decimal 39)</td>
              <td>Apostrophe (Apostrophe-Quote)</td>
            </tr>
            <tr>
              <td>&amp;lt;</td>
              <td>&lt;</td>
              <td>U+003C (Decimal 60)</td>
              <td>Less-than</td>
            </tr>
            <tr>
              <td>&amp;gt;</td>
              <td>&gt;</td>
              <td>U+003E (Decimal 62)</td>
              <td>Greater-than</td>
            </tr>
          </table>
          <p>
            StrToXMLValue also ensures that any NULL character values (Decimal 0) in s are removed.
          </p>
          <p>
            No actions are performed in the method when s is an empty string (<b>''</b>).
          </p>
          <p>
            Use XMLValueToStr to convert XML character data to its representation as a String data type.
          </p>
        </descr>
        <seealso>
          <link id="XMLValueToStr">XMLValueToStr</link>
        </seealso>
      </element>
      <element name="StrToXMLValue.Result">
        <short>XML character data for the specified value</short>
      </element>
      <element name="StrToXMLValue.s">
        <short>Values to convert to XML character data</short>
      </element>

      <element name="XMLValueToStr">
        <short>Converts XML character data to its representation as a string value</short>
        <descr>
          <p>
            <var>XMLValueToStr</var> is a <var>String</var> function used to convert the XML character data in s to its representation as a string data type. The XML specification has five "predefined entities" that represent special characters. XMLValueToStr ensures that any of these character entities in s are converted to their plain string representation, including:
          </p>
          <table>
            <tr>
              <td><b>Character</b></td>
              <td><b>Entity Name</b></td>
              <td><b>Unicode Codepoint</b></td>
              <td><b>Description</b></td>
            </tr>
            <tr>
              <td>&amp;quot;</td>
              <td>&quot;</td>
              <td>U+0022 (Decimal 34)</td>
              <td>Double quotation Mark</td>
            </tr>
            <tr>
              <td>&amp;amp;</td>
              <td>&amp;</td>
              <td>U+0026 (Decimal 38)</td>
              <td>Ampersand</td>
            </tr>
            <tr>
              <td>&amp;apos;</td>
              <td>&apos;</td>
              <td>U+0027 (Decimal 39)</td>
              <td>Apostrophe (Apostrophe-Quote)</td>
            </tr>
            <tr>
              <td>&amp;lt;</td>
              <td>&lt;</td>
              <td>U+003C (Decimal 60)</td>
              <td>Less-than</td>
            </tr>
            <tr>
              <td>&amp;gt;</td>
              <td>&gt;</td>
              <td>U+003E (Decimal 62)</td>
              <td>Greater-than</td>
            </tr>
          </table>
          <p>
            XMLValueToStr also ensures that any NULL character values (Decimal 0) in s are removed.
          </p>
          <p>
            No actions are performed in the method when s is an empty string (<b>''</b>).
          </p>
          <p>
            Use StrToXMLValue to convert a string data type to its representation as XML character data.
          </p>
        </descr>
        <seealso>
          <link id="StrToXMLValue">StrToXMLValue</link>
        </seealso>
      </element>
      <element name="XMLValueToStr.Result">
        <short>Plain string representation for the XML character data</short>
      </element>
      <element name="XMLValueToStr.s">
        <short>XML character data to convert in the method</short>
      </element>

      <element name="EncodeLesserAndGreaterThan">
        <short>Converts instance of the reserved characters</short>
        <descr>
          <p>
            <var>EncodeLesserAndGreaterThan</var> is a <var>String</var> function used to convert instances of the reserved characters in s. EncodeLesserAndGreaterThan is similar to StrToXMLValue, but handles only the '&lt;' and '&gt;' characters, or <b>NULL</b> (<b>Decimal 0</b>) byte values in the string. No actions are performed in the routine when s is an empty string (<b>''</b>). The return value reflects the string value after conversion.
          </p>
        </descr>
        <seealso>
          <link id="StrToXMLValue">StrToXMLValue</link>
        </seealso>
      </element>
      <element name="EncodeLesserAndGreaterThan.Result">
        <short>Converted values from the function</short>
      </element>
      <element name="EncodeLesserAndGreaterThan.s">
        <short>Values to convert in the routine</short>
      </element>

    </module>
    <!-- laz2_DOM -->

  </package>
</fpdoc-descriptions>
